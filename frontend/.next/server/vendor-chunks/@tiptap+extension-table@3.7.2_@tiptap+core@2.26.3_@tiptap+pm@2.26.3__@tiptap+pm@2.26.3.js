"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tiptap+extension-table@3.7.2_@tiptap+core@2.26.3_@tiptap+pm@2.26.3__@tiptap+pm@2.26.3";
exports.ids = ["vendor-chunks/@tiptap+extension-table@3.7.2_@tiptap+core@2.26.3_@tiptap+pm@2.26.3__@tiptap+pm@2.26.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@tiptap+extension-table@3.7.2_@tiptap+core@2.26.3_@tiptap+pm@2.26.3__@tiptap+pm@2.26.3/node_modules/@tiptap/extension-table/dist/index.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tiptap+extension-table@3.7.2_@tiptap+core@2.26.3_@tiptap+pm@2.26.3__@tiptap+pm@2.26.3/node_modules/@tiptap/extension-table/dist/index.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CELL_LINE_SEPARATOR: () => (/* binding */ DEFAULT_CELL_LINE_SEPARATOR),\n/* harmony export */   Table: () => (/* binding */ Table),\n/* harmony export */   TableCell: () => (/* binding */ TableCell),\n/* harmony export */   TableHeader: () => (/* binding */ TableHeader),\n/* harmony export */   TableKit: () => (/* binding */ TableKit),\n/* harmony export */   TableRow: () => (/* binding */ TableRow),\n/* harmony export */   TableView: () => (/* binding */ TableView),\n/* harmony export */   createColGroup: () => (/* binding */ createColGroup),\n/* harmony export */   createTable: () => (/* binding */ createTable),\n/* harmony export */   renderTableToMarkdown: () => (/* binding */ renderTableToMarkdown),\n/* harmony export */   updateColumns: () => (/* binding */ updateColumns)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/.pnpm/@tiptap+core@2.26.3_@tiptap+pm@2.26.3/node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/.pnpm/@tiptap+pm@2.26.3/node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var _tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/pm/tables */ \"(ssr)/./node_modules/.pnpm/@tiptap+pm@2.26.3/node_modules/@tiptap/pm/tables/dist/index.js\");\n// src/cell/table-cell.ts\n\nvar TableCell = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: \"tableCell\",\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: \"block+\",\n  addAttributes() {\n    return {\n      colspan: {\n        default: 1\n      },\n      rowspan: {\n        default: 1\n      },\n      colwidth: {\n        default: null,\n        parseHTML: (element) => {\n          var _a, _b;\n          const colwidth = element.getAttribute(\"colwidth\");\n          const value = colwidth ? colwidth.split(\",\").map((width) => parseInt(width, 10)) : null;\n          if (!value) {\n            const cols = (_a = element.closest(\"table\")) == null ? void 0 : _a.querySelectorAll(\"colgroup > col\");\n            const cellIndex = Array.from(((_b = element.parentElement) == null ? void 0 : _b.children) || []).indexOf(element);\n            if (cellIndex && cellIndex > -1 && cols && cols[cellIndex]) {\n              const colWidth = cols[cellIndex].getAttribute(\"width\");\n              return colWidth ? [parseInt(colWidth, 10)] : null;\n            }\n          }\n          return value;\n        }\n      }\n    };\n  },\n  tableRole: \"cell\",\n  isolating: true,\n  parseHTML() {\n    return [{ tag: \"td\" }];\n  },\n  renderHTML({ HTMLAttributes }) {\n    return [\"td\", (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  }\n});\n\n// src/header/table-header.ts\n\nvar TableHeader = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: \"tableHeader\",\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: \"block+\",\n  addAttributes() {\n    return {\n      colspan: {\n        default: 1\n      },\n      rowspan: {\n        default: 1\n      },\n      colwidth: {\n        default: null,\n        parseHTML: (element) => {\n          const colwidth = element.getAttribute(\"colwidth\");\n          const value = colwidth ? colwidth.split(\",\").map((width) => parseInt(width, 10)) : null;\n          return value;\n        }\n      }\n    };\n  },\n  tableRole: \"header_cell\",\n  isolating: true,\n  parseHTML() {\n    return [{ tag: \"th\" }];\n  },\n  renderHTML({ HTMLAttributes }) {\n    return [\"th\", (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  }\n});\n\n// src/kit/index.ts\n\n\n// src/row/table-row.ts\n\nvar TableRow = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: \"tableRow\",\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: \"(tableCell | tableHeader)*\",\n  tableRole: \"row\",\n  parseHTML() {\n    return [{ tag: \"tr\" }];\n  },\n  renderHTML({ HTMLAttributes }) {\n    return [\"tr\", (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes), 0];\n  }\n});\n\n// src/table/table.ts\n\n\n\n\n// src/table/utilities/colStyle.ts\nfunction getColStyleDeclaration(minWidth, width) {\n  if (width) {\n    return [\"width\", `${Math.max(width, minWidth)}px`];\n  }\n  return [\"min-width\", `${minWidth}px`];\n}\n\n// src/table/TableView.ts\nfunction updateColumns(node, colgroup, table, cellMinWidth, overrideCol, overrideValue) {\n  var _a;\n  let totalWidth = 0;\n  let fixedWidth = true;\n  let nextDOM = colgroup.firstChild;\n  const row = node.firstChild;\n  if (row !== null) {\n    for (let i = 0, col = 0; i < row.childCount; i += 1) {\n      const { colspan, colwidth } = row.child(i).attrs;\n      for (let j = 0; j < colspan; j += 1, col += 1) {\n        const hasWidth = overrideCol === col ? overrideValue : colwidth && colwidth[j];\n        const cssWidth = hasWidth ? `${hasWidth}px` : \"\";\n        totalWidth += hasWidth || cellMinWidth;\n        if (!hasWidth) {\n          fixedWidth = false;\n        }\n        if (!nextDOM) {\n          const colElement = document.createElement(\"col\");\n          const [propertyKey, propertyValue] = getColStyleDeclaration(cellMinWidth, hasWidth);\n          colElement.style.setProperty(propertyKey, propertyValue);\n          colgroup.appendChild(colElement);\n        } else {\n          if (nextDOM.style.width !== cssWidth) {\n            const [propertyKey, propertyValue] = getColStyleDeclaration(cellMinWidth, hasWidth);\n            nextDOM.style.setProperty(propertyKey, propertyValue);\n          }\n          nextDOM = nextDOM.nextSibling;\n        }\n      }\n    }\n  }\n  while (nextDOM) {\n    const after = nextDOM.nextSibling;\n    (_a = nextDOM.parentNode) == null ? void 0 : _a.removeChild(nextDOM);\n    nextDOM = after;\n  }\n  if (fixedWidth) {\n    table.style.width = `${totalWidth}px`;\n    table.style.minWidth = \"\";\n  } else {\n    table.style.width = \"\";\n    table.style.minWidth = `${totalWidth}px`;\n  }\n}\nvar TableView = class {\n  constructor(node, cellMinWidth) {\n    this.node = node;\n    this.cellMinWidth = cellMinWidth;\n    this.dom = document.createElement(\"div\");\n    this.dom.className = \"tableWrapper\";\n    this.table = this.dom.appendChild(document.createElement(\"table\"));\n    this.colgroup = this.table.appendChild(document.createElement(\"colgroup\"));\n    updateColumns(node, this.colgroup, this.table, cellMinWidth);\n    this.contentDOM = this.table.appendChild(document.createElement(\"tbody\"));\n  }\n  update(node) {\n    if (node.type !== this.node.type) {\n      return false;\n    }\n    this.node = node;\n    updateColumns(node, this.colgroup, this.table, this.cellMinWidth);\n    return true;\n  }\n  ignoreMutation(mutation) {\n    const target = mutation.target;\n    const isInsideWrapper = this.dom.contains(target);\n    const isInsideContent = this.contentDOM.contains(target);\n    if (isInsideWrapper && !isInsideContent) {\n      if (mutation.type === \"attributes\" || mutation.type === \"childList\" || mutation.type === \"characterData\") {\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\n// src/table/utilities/createColGroup.ts\nfunction createColGroup(node, cellMinWidth, overrideCol, overrideValue) {\n  let totalWidth = 0;\n  let fixedWidth = true;\n  const cols = [];\n  const row = node.firstChild;\n  if (!row) {\n    return {};\n  }\n  for (let i = 0, col = 0; i < row.childCount; i += 1) {\n    const { colspan, colwidth } = row.child(i).attrs;\n    for (let j = 0; j < colspan; j += 1, col += 1) {\n      const hasWidth = overrideCol === col ? overrideValue : colwidth && colwidth[j];\n      totalWidth += hasWidth || cellMinWidth;\n      if (!hasWidth) {\n        fixedWidth = false;\n      }\n      const [property, value] = getColStyleDeclaration(cellMinWidth, hasWidth);\n      cols.push([\"col\", { style: `${property}: ${value}` }]);\n    }\n  }\n  const tableWidth = fixedWidth ? `${totalWidth}px` : \"\";\n  const tableMinWidth = fixedWidth ? \"\" : `${totalWidth}px`;\n  const colgroup = [\"colgroup\", {}, ...cols];\n  return { colgroup, tableWidth, tableMinWidth };\n}\n\n// src/table/utilities/createCell.ts\nfunction createCell(cellType, cellContent) {\n  if (cellContent) {\n    return cellType.createChecked(null, cellContent);\n  }\n  return cellType.createAndFill();\n}\n\n// src/table/utilities/getTableNodeTypes.ts\nfunction getTableNodeTypes(schema) {\n  if (schema.cached.tableNodeTypes) {\n    return schema.cached.tableNodeTypes;\n  }\n  const roles = {};\n  Object.keys(schema.nodes).forEach((type) => {\n    const nodeType = schema.nodes[type];\n    if (nodeType.spec.tableRole) {\n      roles[nodeType.spec.tableRole] = nodeType;\n    }\n  });\n  schema.cached.tableNodeTypes = roles;\n  return roles;\n}\n\n// src/table/utilities/createTable.ts\nfunction createTable(schema, rowsCount, colsCount, withHeaderRow, cellContent) {\n  const types = getTableNodeTypes(schema);\n  const headerCells = [];\n  const cells = [];\n  for (let index = 0; index < colsCount; index += 1) {\n    const cell = createCell(types.cell, cellContent);\n    if (cell) {\n      cells.push(cell);\n    }\n    if (withHeaderRow) {\n      const headerCell = createCell(types.header_cell, cellContent);\n      if (headerCell) {\n        headerCells.push(headerCell);\n      }\n    }\n  }\n  const rows = [];\n  for (let index = 0; index < rowsCount; index += 1) {\n    rows.push(types.row.createChecked(null, withHeaderRow && index === 0 ? headerCells : cells));\n  }\n  return types.table.createChecked(null, rows);\n}\n\n// src/table/utilities/deleteTableWhenAllCellsSelected.ts\n\n\n// src/table/utilities/isCellSelection.ts\n\nfunction isCellSelection(value) {\n  return value instanceof _tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.CellSelection;\n}\n\n// src/table/utilities/deleteTableWhenAllCellsSelected.ts\nvar deleteTableWhenAllCellsSelected = ({ editor }) => {\n  const { selection } = editor.state;\n  if (!isCellSelection(selection)) {\n    return false;\n  }\n  let cellCount = 0;\n  const table = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.findParentNodeClosestToPos)(selection.ranges[0].$from, (node) => {\n    return node.type.name === \"table\";\n  });\n  table == null ? void 0 : table.node.descendants((node) => {\n    if (node.type.name === \"table\") {\n      return false;\n    }\n    if ([\"tableCell\", \"tableHeader\"].includes(node.type.name)) {\n      cellCount += 1;\n    }\n  });\n  const allCellsSelected = cellCount === selection.ranges.length;\n  if (!allCellsSelected) {\n    return false;\n  }\n  editor.commands.deleteTable();\n  return true;\n};\n\n// src/table/utilities/markdown.ts\nvar DEFAULT_CELL_LINE_SEPARATOR = \"\u001f\";\nfunction collapseWhitespace(s) {\n  return (s || \"\").replace(/\\s+/g, \" \").trim();\n}\nfunction renderTableToMarkdown(node, h, options = {}) {\n  var _a;\n  const cellSep = (_a = options.cellLineSeparator) != null ? _a : DEFAULT_CELL_LINE_SEPARATOR;\n  if (!node || !node.content || node.content.length === 0) {\n    return \"\";\n  }\n  const rows = [];\n  node.content.forEach((rowNode) => {\n    const cells = [];\n    if (rowNode.content) {\n      rowNode.content.forEach((cellNode) => {\n        let raw = \"\";\n        if (cellNode.content && Array.isArray(cellNode.content) && cellNode.content.length > 1) {\n          const parts = cellNode.content.map((child) => h.renderChildren(child));\n          raw = parts.join(cellSep);\n        } else {\n          raw = cellNode.content ? h.renderChildren(cellNode.content) : \"\";\n        }\n        const text = collapseWhitespace(raw);\n        const isHeader = cellNode.type === \"tableHeader\";\n        cells.push({ text, isHeader });\n      });\n    }\n    rows.push(cells);\n  });\n  const columnCount = rows.reduce((max, r) => Math.max(max, r.length), 0);\n  if (columnCount === 0) {\n    return \"\";\n  }\n  const colWidths = new Array(columnCount).fill(0);\n  rows.forEach((r) => {\n    var _a2;\n    for (let i = 0; i < columnCount; i += 1) {\n      const cell = ((_a2 = r[i]) == null ? void 0 : _a2.text) || \"\";\n      const len = cell.length;\n      if (len > colWidths[i]) {\n        colWidths[i] = len;\n      }\n      if (colWidths[i] < 3) {\n        colWidths[i] = 3;\n      }\n    }\n  });\n  const pad = (s, width) => s + \" \".repeat(Math.max(0, width - s.length));\n  const headerRow = rows[0];\n  const hasHeader = headerRow.some((c) => c.isHeader);\n  let out = \"\\n\";\n  const headerTexts = new Array(columnCount).fill(0).map((_, i) => hasHeader ? headerRow[i] && headerRow[i].text || \"\" : \"\");\n  out += `| ${headerTexts.map((t, i) => pad(t, colWidths[i])).join(\" | \")} |\n`;\n  out += `| ${colWidths.map((w) => \"-\".repeat(Math.max(3, w))).join(\" | \")} |\n`;\n  const body = hasHeader ? rows.slice(1) : rows;\n  body.forEach((r) => {\n    out += `| ${new Array(columnCount).fill(0).map((_, i) => pad(r[i] && r[i].text || \"\", colWidths[i])).join(\" | \")} |\n`;\n  });\n  return out;\n}\nvar markdown_default = renderTableToMarkdown;\n\n// src/table/table.ts\nvar Table = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n  name: \"table\",\n  // @ts-ignore\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      resizable: false,\n      handleWidth: 5,\n      cellMinWidth: 25,\n      // TODO: fix\n      View: TableView,\n      lastColumnResizable: true,\n      allowTableNodeSelection: false\n    };\n  },\n  content: \"tableRow+\",\n  tableRole: \"table\",\n  isolating: true,\n  group: \"block\",\n  parseHTML() {\n    return [{ tag: \"table\" }];\n  },\n  renderHTML({ node, HTMLAttributes }) {\n    const { colgroup, tableWidth, tableMinWidth } = createColGroup(node, this.options.cellMinWidth);\n    const table = [\n      \"table\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes, {\n        style: tableWidth ? `width: ${tableWidth}` : `min-width: ${tableMinWidth}`\n      }),\n      colgroup,\n      [\"tbody\", 0]\n    ];\n    return table;\n  },\n  parseMarkdown: (token, h) => {\n    const rows = [];\n    if (token.header) {\n      const headerCells = [];\n      token.header.forEach((cell) => {\n        headerCells.push(h.createNode(\"tableHeader\", {}, [{ type: \"paragraph\", content: h.parseInline(cell.tokens) }]));\n      });\n      rows.push(h.createNode(\"tableRow\", {}, headerCells));\n    }\n    if (token.rows) {\n      token.rows.forEach((row) => {\n        const bodyCells = [];\n        row.forEach((cell) => {\n          bodyCells.push(h.createNode(\"tableCell\", {}, [{ type: \"paragraph\", content: h.parseInline(cell.tokens) }]));\n        });\n        rows.push(h.createNode(\"tableRow\", {}, bodyCells));\n      });\n    }\n    return h.createNode(\"table\", void 0, rows);\n  },\n  renderMarkdown: (node, h) => {\n    return markdown_default(node, h);\n  },\n  addCommands() {\n    return {\n      insertTable: ({ rows = 3, cols = 3, withHeaderRow = true } = {}) => ({ tr, dispatch, editor }) => {\n        const node = createTable(editor.schema, rows, cols, withHeaderRow);\n        if (dispatch) {\n          const offset = tr.selection.from + 1;\n          tr.replaceSelectionWith(node).scrollIntoView().setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.TextSelection.near(tr.doc.resolve(offset)));\n        }\n        return true;\n      },\n      addColumnBefore: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.addColumnBefore)(state, dispatch);\n      },\n      addColumnAfter: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.addColumnAfter)(state, dispatch);\n      },\n      deleteColumn: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.deleteColumn)(state, dispatch);\n      },\n      addRowBefore: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.addRowBefore)(state, dispatch);\n      },\n      addRowAfter: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.addRowAfter)(state, dispatch);\n      },\n      deleteRow: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.deleteRow)(state, dispatch);\n      },\n      deleteTable: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.deleteTable)(state, dispatch);\n      },\n      mergeCells: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.mergeCells)(state, dispatch);\n      },\n      splitCell: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.splitCell)(state, dispatch);\n      },\n      toggleHeaderColumn: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.toggleHeader)(\"column\")(state, dispatch);\n      },\n      toggleHeaderRow: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.toggleHeader)(\"row\")(state, dispatch);\n      },\n      toggleHeaderCell: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.toggleHeaderCell)(state, dispatch);\n      },\n      mergeOrSplit: () => ({ state, dispatch }) => {\n        if ((0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.mergeCells)(state, dispatch)) {\n          return true;\n        }\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.splitCell)(state, dispatch);\n      },\n      setCellAttribute: (name, value) => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.setCellAttr)(name, value)(state, dispatch);\n      },\n      goToNextCell: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.goToNextCell)(1)(state, dispatch);\n      },\n      goToPreviousCell: () => ({ state, dispatch }) => {\n        return (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.goToNextCell)(-1)(state, dispatch);\n      },\n      fixTables: () => ({ state, dispatch }) => {\n        if (dispatch) {\n          (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.fixTables)(state);\n        }\n        return true;\n      },\n      setCellSelection: (position) => ({ tr, dispatch }) => {\n        if (dispatch) {\n          const selection = _tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.CellSelection.create(tr.doc, position.anchorCell, position.headCell);\n          tr.setSelection(selection);\n        }\n        return true;\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      Tab: () => {\n        if (this.editor.commands.goToNextCell()) {\n          return true;\n        }\n        if (!this.editor.can().addRowAfter()) {\n          return false;\n        }\n        return this.editor.chain().addRowAfter().goToNextCell().run();\n      },\n      \"Shift-Tab\": () => this.editor.commands.goToPreviousCell(),\n      Backspace: deleteTableWhenAllCellsSelected,\n      \"Mod-Backspace\": deleteTableWhenAllCellsSelected,\n      Delete: deleteTableWhenAllCellsSelected,\n      \"Mod-Delete\": deleteTableWhenAllCellsSelected\n    };\n  },\n  addProseMirrorPlugins() {\n    const isResizable = this.options.resizable && this.editor.isEditable;\n    return [\n      ...isResizable ? [\n        (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.columnResizing)({\n          handleWidth: this.options.handleWidth,\n          cellMinWidth: this.options.cellMinWidth,\n          defaultCellMinWidth: this.options.cellMinWidth,\n          View: this.options.View,\n          lastColumnResizable: this.options.lastColumnResizable\n        })\n      ] : [],\n      (0,_tiptap_pm_tables__WEBPACK_IMPORTED_MODULE_2__.tableEditing)({\n        allowTableNodeSelection: this.options.allowTableNodeSelection\n      })\n    ];\n  },\n  extendNodeSchema(extension) {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    return {\n      tableRole: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.getExtensionField)(extension, \"tableRole\", context))\n    };\n  }\n});\n\n// src/kit/index.ts\nvar TableKit = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Extension.create({\n  name: \"tableKit\",\n  addExtensions() {\n    const extensions = [];\n    if (this.options.table !== false) {\n      extensions.push(Table.configure(this.options.table));\n    }\n    if (this.options.tableCell !== false) {\n      extensions.push(TableCell.configure(this.options.tableCell));\n    }\n    if (this.options.tableHeader !== false) {\n      extensions.push(TableHeader.configure(this.options.tableHeader));\n    }\n    if (this.options.tableRow !== false) {\n      extensions.push(TableRow.configure(this.options.tableRow));\n    }\n    return extensions;\n  }\n});\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRpcHRhcCtleHRlbnNpb24tdGFibGVAMy43LjJfQHRpcHRhcCtjb3JlQDIuMjYuM19AdGlwdGFwK3BtQDIuMjYuM19fQHRpcHRhcCtwbUAyLjI2LjMvbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLXRhYmxlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNxRDtBQUNyRCxnQkFBZ0IsOENBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QixHQUFHO0FBQ0gsZUFBZSxnQkFBZ0I7QUFDL0Isa0JBQWtCLDZEQUFlO0FBQ2pDO0FBQ0EsQ0FBQzs7QUFFRDtBQUNrRjtBQUNsRixrQkFBa0IsOENBQUs7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QixHQUFHO0FBQ0gsZUFBZSxnQkFBZ0I7QUFDL0Isa0JBQWtCLDZEQUFnQjtBQUNsQztBQUNBLENBQUM7O0FBRUQ7QUFDeUM7O0FBRXpDO0FBQ2tGO0FBQ2xGLGVBQWUsOENBQUs7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxj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L0M7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxlQUFlLG1EQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBYUM7QUFDRiIsInNvdXJjZXMiOlsiL3Jvb3QvdGhlMTEvZnJvbnRlbmQvbm9kZV9tb2R1bGVzLy5wbnBtL0B0aXB0YXArZXh0ZW5zaW9uLXRhYmxlQDMuNy4yX0B0aXB0YXArY29yZUAyLjI2LjNfQHRpcHRhcCtwbUAyLjI2LjNfX0B0aXB0YXArcG1AMi4yNi4zL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi10YWJsZS9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jZWxsL3RhYmxlLWNlbGwudHNcbmltcG9ydCB7IG1lcmdlQXR0cmlidXRlcywgTm9kZSB9IGZyb20gXCJAdGlwdGFwL2NvcmVcIjtcbnZhciBUYWJsZUNlbGwgPSBOb2RlLmNyZWF0ZSh7XG4gIG5hbWU6IFwidGFibGVDZWxsXCIsXG4gIGFkZE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fVxuICAgIH07XG4gIH0sXG4gIGNvbnRlbnQ6IFwiYmxvY2srXCIsXG4gIGFkZEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbHNwYW46IHtcbiAgICAgICAgZGVmYXVsdDogMVxuICAgICAgfSxcbiAgICAgIHJvd3NwYW46IHtcbiAgICAgICAgZGVmYXVsdDogMVxuICAgICAgfSxcbiAgICAgIGNvbHdpZHRoOiB7XG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHBhcnNlSFRNTDogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgIGNvbnN0IGNvbHdpZHRoID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjb2x3aWR0aFwiKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbHdpZHRoID8gY29sd2lkdGguc3BsaXQoXCIsXCIpLm1hcCgod2lkdGgpID0+IHBhcnNlSW50KHdpZHRoLCAxMCkpIDogbnVsbDtcbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBjb2xzID0gKF9hID0gZWxlbWVudC5jbG9zZXN0KFwidGFibGVcIikpID09IG51bGwgPyB2b2lkIDAgOiBfYS5xdWVyeVNlbGVjdG9yQWxsKFwiY29sZ3JvdXAgPiBjb2xcIik7XG4gICAgICAgICAgICBjb25zdCBjZWxsSW5kZXggPSBBcnJheS5mcm9tKCgoX2IgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jaGlsZHJlbikgfHwgW10pLmluZGV4T2YoZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAoY2VsbEluZGV4ICYmIGNlbGxJbmRleCA+IC0xICYmIGNvbHMgJiYgY29sc1tjZWxsSW5kZXhdKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbFdpZHRoID0gY29sc1tjZWxsSW5kZXhdLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpO1xuICAgICAgICAgICAgICByZXR1cm4gY29sV2lkdGggPyBbcGFyc2VJbnQoY29sV2lkdGgsIDEwKV0gOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICB0YWJsZVJvbGU6IFwiY2VsbFwiLFxuICBpc29sYXRpbmc6IHRydWUsXG4gIHBhcnNlSFRNTCgpIHtcbiAgICByZXR1cm4gW3sgdGFnOiBcInRkXCIgfV07XG4gIH0sXG4gIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgcmV0dXJuIFtcInRkXCIsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XG4gIH1cbn0pO1xuXG4vLyBzcmMvaGVhZGVyL3RhYmxlLWhlYWRlci50c1xuaW1wb3J0IHsgbWVyZ2VBdHRyaWJ1dGVzIGFzIG1lcmdlQXR0cmlidXRlczIsIE5vZGUgYXMgTm9kZTIgfSBmcm9tIFwiQHRpcHRhcC9jb3JlXCI7XG52YXIgVGFibGVIZWFkZXIgPSBOb2RlMi5jcmVhdGUoe1xuICBuYW1lOiBcInRhYmxlSGVhZGVyXCIsXG4gIGFkZE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fVxuICAgIH07XG4gIH0sXG4gIGNvbnRlbnQ6IFwiYmxvY2srXCIsXG4gIGFkZEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbHNwYW46IHtcbiAgICAgICAgZGVmYXVsdDogMVxuICAgICAgfSxcbiAgICAgIHJvd3NwYW46IHtcbiAgICAgICAgZGVmYXVsdDogMVxuICAgICAgfSxcbiAgICAgIGNvbHdpZHRoOiB7XG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHBhcnNlSFRNTDogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBjb25zdCBjb2x3aWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY29sd2lkdGhcIik7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBjb2x3aWR0aCA/IGNvbHdpZHRoLnNwbGl0KFwiLFwiKS5tYXAoKHdpZHRoKSA9PiBwYXJzZUludCh3aWR0aCwgMTApKSA6IG51bGw7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgdGFibGVSb2xlOiBcImhlYWRlcl9jZWxsXCIsXG4gIGlzb2xhdGluZzogdHJ1ZSxcbiAgcGFyc2VIVE1MKCkge1xuICAgIHJldHVybiBbeyB0YWc6IFwidGhcIiB9XTtcbiAgfSxcbiAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcbiAgICByZXR1cm4gW1widGhcIiwgbWVyZ2VBdHRyaWJ1dGVzMih0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XG4gIH1cbn0pO1xuXG4vLyBzcmMva2l0L2luZGV4LnRzXG5pbXBvcnQgeyBFeHRlbnNpb24gfSBmcm9tIFwiQHRpcHRhcC9jb3JlXCI7XG5cbi8vIHNyYy9yb3cvdGFibGUtcm93LnRzXG5pbXBvcnQgeyBtZXJnZUF0dHJpYnV0ZXMgYXMgbWVyZ2VBdHRyaWJ1dGVzMywgTm9kZSBhcyBOb2RlMyB9IGZyb20gXCJAdGlwdGFwL2NvcmVcIjtcbnZhciBUYWJsZVJvdyA9IE5vZGUzLmNyZWF0ZSh7XG4gIG5hbWU6IFwidGFibGVSb3dcIixcbiAgYWRkT3B0aW9ucygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9XG4gICAgfTtcbiAgfSxcbiAgY29udGVudDogXCIodGFibGVDZWxsIHwgdGFibGVIZWFkZXIpKlwiLFxuICB0YWJsZVJvbGU6IFwicm93XCIsXG4gIHBhcnNlSFRNTCgpIHtcbiAgICByZXR1cm4gW3sgdGFnOiBcInRyXCIgfV07XG4gIH0sXG4gIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgcmV0dXJuIFtcInRyXCIsIG1lcmdlQXR0cmlidXRlczModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xuICB9XG59KTtcblxuLy8gc3JjL3RhYmxlL3RhYmxlLnRzXG5pbXBvcnQge1xuICBjYWxsT3JSZXR1cm4sXG4gIGdldEV4dGVuc2lvbkZpZWxkLFxuICBtZXJnZUF0dHJpYnV0ZXMgYXMgbWVyZ2VBdHRyaWJ1dGVzNCxcbiAgTm9kZSBhcyBOb2RlNFxufSBmcm9tIFwiQHRpcHRhcC9jb3JlXCI7XG5pbXBvcnQgeyBUZXh0U2VsZWN0aW9uIH0gZnJvbSBcIkB0aXB0YXAvcG0vc3RhdGVcIjtcbmltcG9ydCB7XG4gIGFkZENvbHVtbkFmdGVyLFxuICBhZGRDb2x1bW5CZWZvcmUsXG4gIGFkZFJvd0FmdGVyLFxuICBhZGRSb3dCZWZvcmUsXG4gIENlbGxTZWxlY3Rpb24gYXMgQ2VsbFNlbGVjdGlvbjIsXG4gIGNvbHVtblJlc2l6aW5nLFxuICBkZWxldGVDb2x1bW4sXG4gIGRlbGV0ZVJvdyxcbiAgZGVsZXRlVGFibGUsXG4gIGZpeFRhYmxlcyxcbiAgZ29Ub05leHRDZWxsLFxuICBtZXJnZUNlbGxzLFxuICBzZXRDZWxsQXR0cixcbiAgc3BsaXRDZWxsLFxuICB0YWJsZUVkaXRpbmcsXG4gIHRvZ2dsZUhlYWRlcixcbiAgdG9nZ2xlSGVhZGVyQ2VsbFxufSBmcm9tIFwiQHRpcHRhcC9wbS90YWJsZXNcIjtcblxuLy8gc3JjL3RhYmxlL3V0aWxpdGllcy9jb2xTdHlsZS50c1xuZnVuY3Rpb24gZ2V0Q29sU3R5bGVEZWNsYXJhdGlvbihtaW5XaWR0aCwgd2lkdGgpIHtcbiAgaWYgKHdpZHRoKSB7XG4gICAgcmV0dXJuIFtcIndpZHRoXCIsIGAke01hdGgubWF4KHdpZHRoLCBtaW5XaWR0aCl9cHhgXTtcbiAgfVxuICByZXR1cm4gW1wibWluLXdpZHRoXCIsIGAke21pbldpZHRofXB4YF07XG59XG5cbi8vIHNyYy90YWJsZS9UYWJsZVZpZXcudHNcbmZ1bmN0aW9uIHVwZGF0ZUNvbHVtbnMobm9kZSwgY29sZ3JvdXAsIHRhYmxlLCBjZWxsTWluV2lkdGgsIG92ZXJyaWRlQ29sLCBvdmVycmlkZVZhbHVlKSB7XG4gIHZhciBfYTtcbiAgbGV0IHRvdGFsV2lkdGggPSAwO1xuICBsZXQgZml4ZWRXaWR0aCA9IHRydWU7XG4gIGxldCBuZXh0RE9NID0gY29sZ3JvdXAuZmlyc3RDaGlsZDtcbiAgY29uc3Qgcm93ID0gbm9kZS5maXJzdENoaWxkO1xuICBpZiAocm93ICE9PSBudWxsKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGNvbCA9IDA7IGkgPCByb3cuY2hpbGRDb3VudDsgaSArPSAxKSB7XG4gICAgICBjb25zdCB7IGNvbHNwYW4sIGNvbHdpZHRoIH0gPSByb3cuY2hpbGQoaSkuYXR0cnM7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHNwYW47IGogKz0gMSwgY29sICs9IDEpIHtcbiAgICAgICAgY29uc3QgaGFzV2lkdGggPSBvdmVycmlkZUNvbCA9PT0gY29sID8gb3ZlcnJpZGVWYWx1ZSA6IGNvbHdpZHRoICYmIGNvbHdpZHRoW2pdO1xuICAgICAgICBjb25zdCBjc3NXaWR0aCA9IGhhc1dpZHRoID8gYCR7aGFzV2lkdGh9cHhgIDogXCJcIjtcbiAgICAgICAgdG90YWxXaWR0aCArPSBoYXNXaWR0aCB8fCBjZWxsTWluV2lkdGg7XG4gICAgICAgIGlmICghaGFzV2lkdGgpIHtcbiAgICAgICAgICBmaXhlZFdpZHRoID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuZXh0RE9NKSB7XG4gICAgICAgICAgY29uc3QgY29sRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjb2xcIik7XG4gICAgICAgICAgY29uc3QgW3Byb3BlcnR5S2V5LCBwcm9wZXJ0eVZhbHVlXSA9IGdldENvbFN0eWxlRGVjbGFyYXRpb24oY2VsbE1pbldpZHRoLCBoYXNXaWR0aCk7XG4gICAgICAgICAgY29sRWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eUtleSwgcHJvcGVydHlWYWx1ZSk7XG4gICAgICAgICAgY29sZ3JvdXAuYXBwZW5kQ2hpbGQoY29sRWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5leHRET00uc3R5bGUud2lkdGggIT09IGNzc1dpZHRoKSB7XG4gICAgICAgICAgICBjb25zdCBbcHJvcGVydHlLZXksIHByb3BlcnR5VmFsdWVdID0gZ2V0Q29sU3R5bGVEZWNsYXJhdGlvbihjZWxsTWluV2lkdGgsIGhhc1dpZHRoKTtcbiAgICAgICAgICAgIG5leHRET00uc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHlLZXksIHByb3BlcnR5VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0RE9NID0gbmV4dERPTS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB3aGlsZSAobmV4dERPTSkge1xuICAgIGNvbnN0IGFmdGVyID0gbmV4dERPTS5uZXh0U2libGluZztcbiAgICAoX2EgPSBuZXh0RE9NLnBhcmVudE5vZGUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5yZW1vdmVDaGlsZChuZXh0RE9NKTtcbiAgICBuZXh0RE9NID0gYWZ0ZXI7XG4gIH1cbiAgaWYgKGZpeGVkV2lkdGgpIHtcbiAgICB0YWJsZS5zdHlsZS53aWR0aCA9IGAke3RvdGFsV2lkdGh9cHhgO1xuICAgIHRhYmxlLnN0eWxlLm1pbldpZHRoID0gXCJcIjtcbiAgfSBlbHNlIHtcbiAgICB0YWJsZS5zdHlsZS53aWR0aCA9IFwiXCI7XG4gICAgdGFibGUuc3R5bGUubWluV2lkdGggPSBgJHt0b3RhbFdpZHRofXB4YDtcbiAgfVxufVxudmFyIFRhYmxlVmlldyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iobm9kZSwgY2VsbE1pbldpZHRoKSB7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB0aGlzLmNlbGxNaW5XaWR0aCA9IGNlbGxNaW5XaWR0aDtcbiAgICB0aGlzLmRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kb20uY2xhc3NOYW1lID0gXCJ0YWJsZVdyYXBwZXJcIjtcbiAgICB0aGlzLnRhYmxlID0gdGhpcy5kb20uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpKTtcbiAgICB0aGlzLmNvbGdyb3VwID0gdGhpcy50YWJsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY29sZ3JvdXBcIikpO1xuICAgIHVwZGF0ZUNvbHVtbnMobm9kZSwgdGhpcy5jb2xncm91cCwgdGhpcy50YWJsZSwgY2VsbE1pbldpZHRoKTtcbiAgICB0aGlzLmNvbnRlbnRET00gPSB0aGlzLnRhYmxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKSk7XG4gIH1cbiAgdXBkYXRlKG5vZGUpIHtcbiAgICBpZiAobm9kZS50eXBlICE9PSB0aGlzLm5vZGUudHlwZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHVwZGF0ZUNvbHVtbnMobm9kZSwgdGhpcy5jb2xncm91cCwgdGhpcy50YWJsZSwgdGhpcy5jZWxsTWluV2lkdGgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlnbm9yZU11dGF0aW9uKG11dGF0aW9uKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gbXV0YXRpb24udGFyZ2V0O1xuICAgIGNvbnN0IGlzSW5zaWRlV3JhcHBlciA9IHRoaXMuZG9tLmNvbnRhaW5zKHRhcmdldCk7XG4gICAgY29uc3QgaXNJbnNpZGVDb250ZW50ID0gdGhpcy5jb250ZW50RE9NLmNvbnRhaW5zKHRhcmdldCk7XG4gICAgaWYgKGlzSW5zaWRlV3JhcHBlciAmJiAhaXNJbnNpZGVDb250ZW50KSB7XG4gICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gXCJhdHRyaWJ1dGVzXCIgfHwgbXV0YXRpb24udHlwZSA9PT0gXCJjaGlsZExpc3RcIiB8fCBtdXRhdGlvbi50eXBlID09PSBcImNoYXJhY3RlckRhdGFcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBzcmMvdGFibGUvdXRpbGl0aWVzL2NyZWF0ZUNvbEdyb3VwLnRzXG5mdW5jdGlvbiBjcmVhdGVDb2xHcm91cChub2RlLCBjZWxsTWluV2lkdGgsIG92ZXJyaWRlQ29sLCBvdmVycmlkZVZhbHVlKSB7XG4gIGxldCB0b3RhbFdpZHRoID0gMDtcbiAgbGV0IGZpeGVkV2lkdGggPSB0cnVlO1xuICBjb25zdCBjb2xzID0gW107XG4gIGNvbnN0IHJvdyA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgaWYgKCFyb3cpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGNvbCA9IDA7IGkgPCByb3cuY2hpbGRDb3VudDsgaSArPSAxKSB7XG4gICAgY29uc3QgeyBjb2xzcGFuLCBjb2x3aWR0aCB9ID0gcm93LmNoaWxkKGkpLmF0dHJzO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sc3BhbjsgaiArPSAxLCBjb2wgKz0gMSkge1xuICAgICAgY29uc3QgaGFzV2lkdGggPSBvdmVycmlkZUNvbCA9PT0gY29sID8gb3ZlcnJpZGVWYWx1ZSA6IGNvbHdpZHRoICYmIGNvbHdpZHRoW2pdO1xuICAgICAgdG90YWxXaWR0aCArPSBoYXNXaWR0aCB8fCBjZWxsTWluV2lkdGg7XG4gICAgICBpZiAoIWhhc1dpZHRoKSB7XG4gICAgICAgIGZpeGVkV2lkdGggPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtwcm9wZXJ0eSwgdmFsdWVdID0gZ2V0Q29sU3R5bGVEZWNsYXJhdGlvbihjZWxsTWluV2lkdGgsIGhhc1dpZHRoKTtcbiAgICAgIGNvbHMucHVzaChbXCJjb2xcIiwgeyBzdHlsZTogYCR7cHJvcGVydHl9OiAke3ZhbHVlfWAgfV0pO1xuICAgIH1cbiAgfVxuICBjb25zdCB0YWJsZVdpZHRoID0gZml4ZWRXaWR0aCA/IGAke3RvdGFsV2lkdGh9cHhgIDogXCJcIjtcbiAgY29uc3QgdGFibGVNaW5XaWR0aCA9IGZpeGVkV2lkdGggPyBcIlwiIDogYCR7dG90YWxXaWR0aH1weGA7XG4gIGNvbnN0IGNvbGdyb3VwID0gW1wiY29sZ3JvdXBcIiwge30sIC4uLmNvbHNdO1xuICByZXR1cm4geyBjb2xncm91cCwgdGFibGVXaWR0aCwgdGFibGVNaW5XaWR0aCB9O1xufVxuXG4vLyBzcmMvdGFibGUvdXRpbGl0aWVzL2NyZWF0ZUNlbGwudHNcbmZ1bmN0aW9uIGNyZWF0ZUNlbGwoY2VsbFR5cGUsIGNlbGxDb250ZW50KSB7XG4gIGlmIChjZWxsQ29udGVudCkge1xuICAgIHJldHVybiBjZWxsVHlwZS5jcmVhdGVDaGVja2VkKG51bGwsIGNlbGxDb250ZW50KTtcbiAgfVxuICByZXR1cm4gY2VsbFR5cGUuY3JlYXRlQW5kRmlsbCgpO1xufVxuXG4vLyBzcmMvdGFibGUvdXRpbGl0aWVzL2dldFRhYmxlTm9kZVR5cGVzLnRzXG5mdW5jdGlvbiBnZXRUYWJsZU5vZGVUeXBlcyhzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYS5jYWNoZWQudGFibGVOb2RlVHlwZXMpIHtcbiAgICByZXR1cm4gc2NoZW1hLmNhY2hlZC50YWJsZU5vZGVUeXBlcztcbiAgfVxuICBjb25zdCByb2xlcyA9IHt9O1xuICBPYmplY3Qua2V5cyhzY2hlbWEubm9kZXMpLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICBjb25zdCBub2RlVHlwZSA9IHNjaGVtYS5ub2Rlc1t0eXBlXTtcbiAgICBpZiAobm9kZVR5cGUuc3BlYy50YWJsZVJvbGUpIHtcbiAgICAgIHJvbGVzW25vZGVUeXBlLnNwZWMudGFibGVSb2xlXSA9IG5vZGVUeXBlO1xuICAgIH1cbiAgfSk7XG4gIHNjaGVtYS5jYWNoZWQudGFibGVOb2RlVHlwZXMgPSByb2xlcztcbiAgcmV0dXJuIHJvbGVzO1xufVxuXG4vLyBzcmMvdGFibGUvdXRpbGl0aWVzL2NyZWF0ZVRhYmxlLnRzXG5mdW5jdGlvbiBjcmVhdGVUYWJsZShzY2hlbWEsIHJvd3NDb3VudCwgY29sc0NvdW50LCB3aXRoSGVhZGVyUm93LCBjZWxsQ29udGVudCkge1xuICBjb25zdCB0eXBlcyA9IGdldFRhYmxlTm9kZVR5cGVzKHNjaGVtYSk7XG4gIGNvbnN0IGhlYWRlckNlbGxzID0gW107XG4gIGNvbnN0IGNlbGxzID0gW107XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb2xzQ291bnQ7IGluZGV4ICs9IDEpIHtcbiAgICBjb25zdCBjZWxsID0gY3JlYXRlQ2VsbCh0eXBlcy5jZWxsLCBjZWxsQ29udGVudCk7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIGNlbGxzLnB1c2goY2VsbCk7XG4gICAgfVxuICAgIGlmICh3aXRoSGVhZGVyUm93KSB7XG4gICAgICBjb25zdCBoZWFkZXJDZWxsID0gY3JlYXRlQ2VsbCh0eXBlcy5oZWFkZXJfY2VsbCwgY2VsbENvbnRlbnQpO1xuICAgICAgaWYgKGhlYWRlckNlbGwpIHtcbiAgICAgICAgaGVhZGVyQ2VsbHMucHVzaChoZWFkZXJDZWxsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3Qgcm93cyA9IFtdO1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcm93c0NvdW50OyBpbmRleCArPSAxKSB7XG4gICAgcm93cy5wdXNoKHR5cGVzLnJvdy5jcmVhdGVDaGVja2VkKG51bGwsIHdpdGhIZWFkZXJSb3cgJiYgaW5kZXggPT09IDAgPyBoZWFkZXJDZWxscyA6IGNlbGxzKSk7XG4gIH1cbiAgcmV0dXJuIHR5cGVzLnRhYmxlLmNyZWF0ZUNoZWNrZWQobnVsbCwgcm93cyk7XG59XG5cbi8vIHNyYy90YWJsZS91dGlsaXRpZXMvZGVsZXRlVGFibGVXaGVuQWxsQ2VsbHNTZWxlY3RlZC50c1xuaW1wb3J0IHsgZmluZFBhcmVudE5vZGVDbG9zZXN0VG9Qb3MgfSBmcm9tIFwiQHRpcHRhcC9jb3JlXCI7XG5cbi8vIHNyYy90YWJsZS91dGlsaXRpZXMvaXNDZWxsU2VsZWN0aW9uLnRzXG5pbXBvcnQgeyBDZWxsU2VsZWN0aW9uIH0gZnJvbSBcIkB0aXB0YXAvcG0vdGFibGVzXCI7XG5mdW5jdGlvbiBpc0NlbGxTZWxlY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgQ2VsbFNlbGVjdGlvbjtcbn1cblxuLy8gc3JjL3RhYmxlL3V0aWxpdGllcy9kZWxldGVUYWJsZVdoZW5BbGxDZWxsc1NlbGVjdGVkLnRzXG52YXIgZGVsZXRlVGFibGVXaGVuQWxsQ2VsbHNTZWxlY3RlZCA9ICh7IGVkaXRvciB9KSA9PiB7XG4gIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSBlZGl0b3Iuc3RhdGU7XG4gIGlmICghaXNDZWxsU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGNlbGxDb3VudCA9IDA7XG4gIGNvbnN0IHRhYmxlID0gZmluZFBhcmVudE5vZGVDbG9zZXN0VG9Qb3Moc2VsZWN0aW9uLnJhbmdlc1swXS4kZnJvbSwgKG5vZGUpID0+IHtcbiAgICByZXR1cm4gbm9kZS50eXBlLm5hbWUgPT09IFwidGFibGVcIjtcbiAgfSk7XG4gIHRhYmxlID09IG51bGwgPyB2b2lkIDAgOiB0YWJsZS5ub2RlLmRlc2NlbmRhbnRzKChub2RlKSA9PiB7XG4gICAgaWYgKG5vZGUudHlwZS5uYW1lID09PSBcInRhYmxlXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKFtcInRhYmxlQ2VsbFwiLCBcInRhYmxlSGVhZGVyXCJdLmluY2x1ZGVzKG5vZGUudHlwZS5uYW1lKSkge1xuICAgICAgY2VsbENvdW50ICs9IDE7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgYWxsQ2VsbHNTZWxlY3RlZCA9IGNlbGxDb3VudCA9PT0gc2VsZWN0aW9uLnJhbmdlcy5sZW5ndGg7XG4gIGlmICghYWxsQ2VsbHNTZWxlY3RlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBlZGl0b3IuY29tbWFuZHMuZGVsZXRlVGFibGUoKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBzcmMvdGFibGUvdXRpbGl0aWVzL21hcmtkb3duLnRzXG52YXIgREVGQVVMVF9DRUxMX0xJTkVfU0VQQVJBVE9SID0gXCJcdTAwMWZcIjtcbmZ1bmN0aW9uIGNvbGxhcHNlV2hpdGVzcGFjZShzKSB7XG4gIHJldHVybiAocyB8fCBcIlwiKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKS50cmltKCk7XG59XG5mdW5jdGlvbiByZW5kZXJUYWJsZVRvTWFya2Rvd24obm9kZSwgaCwgb3B0aW9ucyA9IHt9KSB7XG4gIHZhciBfYTtcbiAgY29uc3QgY2VsbFNlcCA9IChfYSA9IG9wdGlvbnMuY2VsbExpbmVTZXBhcmF0b3IpICE9IG51bGwgPyBfYSA6IERFRkFVTFRfQ0VMTF9MSU5FX1NFUEFSQVRPUjtcbiAgaWYgKCFub2RlIHx8ICFub2RlLmNvbnRlbnQgfHwgbm9kZS5jb250ZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGNvbnN0IHJvd3MgPSBbXTtcbiAgbm9kZS5jb250ZW50LmZvckVhY2goKHJvd05vZGUpID0+IHtcbiAgICBjb25zdCBjZWxscyA9IFtdO1xuICAgIGlmIChyb3dOb2RlLmNvbnRlbnQpIHtcbiAgICAgIHJvd05vZGUuY29udGVudC5mb3JFYWNoKChjZWxsTm9kZSkgPT4ge1xuICAgICAgICBsZXQgcmF3ID0gXCJcIjtcbiAgICAgICAgaWYgKGNlbGxOb2RlLmNvbnRlbnQgJiYgQXJyYXkuaXNBcnJheShjZWxsTm9kZS5jb250ZW50KSAmJiBjZWxsTm9kZS5jb250ZW50Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IGNlbGxOb2RlLmNvbnRlbnQubWFwKChjaGlsZCkgPT4gaC5yZW5kZXJDaGlsZHJlbihjaGlsZCkpO1xuICAgICAgICAgIHJhdyA9IHBhcnRzLmpvaW4oY2VsbFNlcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmF3ID0gY2VsbE5vZGUuY29udGVudCA/IGgucmVuZGVyQ2hpbGRyZW4oY2VsbE5vZGUuY29udGVudCkgOiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRleHQgPSBjb2xsYXBzZVdoaXRlc3BhY2UocmF3KTtcbiAgICAgICAgY29uc3QgaXNIZWFkZXIgPSBjZWxsTm9kZS50eXBlID09PSBcInRhYmxlSGVhZGVyXCI7XG4gICAgICAgIGNlbGxzLnB1c2goeyB0ZXh0LCBpc0hlYWRlciB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByb3dzLnB1c2goY2VsbHMpO1xuICB9KTtcbiAgY29uc3QgY29sdW1uQ291bnQgPSByb3dzLnJlZHVjZSgobWF4LCByKSA9PiBNYXRoLm1heChtYXgsIHIubGVuZ3RoKSwgMCk7XG4gIGlmIChjb2x1bW5Db3VudCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGNvbnN0IGNvbFdpZHRocyA9IG5ldyBBcnJheShjb2x1bW5Db3VudCkuZmlsbCgwKTtcbiAgcm93cy5mb3JFYWNoKChyKSA9PiB7XG4gICAgdmFyIF9hMjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbkNvdW50OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGNlbGwgPSAoKF9hMiA9IHJbaV0pID09IG51bGwgPyB2b2lkIDAgOiBfYTIudGV4dCkgfHwgXCJcIjtcbiAgICAgIGNvbnN0IGxlbiA9IGNlbGwubGVuZ3RoO1xuICAgICAgaWYgKGxlbiA+IGNvbFdpZHRoc1tpXSkge1xuICAgICAgICBjb2xXaWR0aHNbaV0gPSBsZW47XG4gICAgICB9XG4gICAgICBpZiAoY29sV2lkdGhzW2ldIDwgMykge1xuICAgICAgICBjb2xXaWR0aHNbaV0gPSAzO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHBhZCA9IChzLCB3aWR0aCkgPT4gcyArIFwiIFwiLnJlcGVhdChNYXRoLm1heCgwLCB3aWR0aCAtIHMubGVuZ3RoKSk7XG4gIGNvbnN0IGhlYWRlclJvdyA9IHJvd3NbMF07XG4gIGNvbnN0IGhhc0hlYWRlciA9IGhlYWRlclJvdy5zb21lKChjKSA9PiBjLmlzSGVhZGVyKTtcbiAgbGV0IG91dCA9IFwiXFxuXCI7XG4gIGNvbnN0IGhlYWRlclRleHRzID0gbmV3IEFycmF5KGNvbHVtbkNvdW50KS5maWxsKDApLm1hcCgoXywgaSkgPT4gaGFzSGVhZGVyID8gaGVhZGVyUm93W2ldICYmIGhlYWRlclJvd1tpXS50ZXh0IHx8IFwiXCIgOiBcIlwiKTtcbiAgb3V0ICs9IGB8ICR7aGVhZGVyVGV4dHMubWFwKCh0LCBpKSA9PiBwYWQodCwgY29sV2lkdGhzW2ldKSkuam9pbihcIiB8IFwiKX0gfFxuYDtcbiAgb3V0ICs9IGB8ICR7Y29sV2lkdGhzLm1hcCgodykgPT4gXCItXCIucmVwZWF0KE1hdGgubWF4KDMsIHcpKSkuam9pbihcIiB8IFwiKX0gfFxuYDtcbiAgY29uc3QgYm9keSA9IGhhc0hlYWRlciA/IHJvd3Muc2xpY2UoMSkgOiByb3dzO1xuICBib2R5LmZvckVhY2goKHIpID0+IHtcbiAgICBvdXQgKz0gYHwgJHtuZXcgQXJyYXkoY29sdW1uQ291bnQpLmZpbGwoMCkubWFwKChfLCBpKSA9PiBwYWQocltpXSAmJiByW2ldLnRleHQgfHwgXCJcIiwgY29sV2lkdGhzW2ldKSkuam9pbihcIiB8IFwiKX0gfFxuYDtcbiAgfSk7XG4gIHJldHVybiBvdXQ7XG59XG52YXIgbWFya2Rvd25fZGVmYXVsdCA9IHJlbmRlclRhYmxlVG9NYXJrZG93bjtcblxuLy8gc3JjL3RhYmxlL3RhYmxlLnRzXG52YXIgVGFibGUgPSBOb2RlNC5jcmVhdGUoe1xuICBuYW1lOiBcInRhYmxlXCIsXG4gIC8vIEB0cy1pZ25vcmVcbiAgYWRkT3B0aW9ucygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxuICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgIGhhbmRsZVdpZHRoOiA1LFxuICAgICAgY2VsbE1pbldpZHRoOiAyNSxcbiAgICAgIC8vIFRPRE86IGZpeFxuICAgICAgVmlldzogVGFibGVWaWV3LFxuICAgICAgbGFzdENvbHVtblJlc2l6YWJsZTogdHJ1ZSxcbiAgICAgIGFsbG93VGFibGVOb2RlU2VsZWN0aW9uOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIGNvbnRlbnQ6IFwidGFibGVSb3crXCIsXG4gIHRhYmxlUm9sZTogXCJ0YWJsZVwiLFxuICBpc29sYXRpbmc6IHRydWUsXG4gIGdyb3VwOiBcImJsb2NrXCIsXG4gIHBhcnNlSFRNTCgpIHtcbiAgICByZXR1cm4gW3sgdGFnOiBcInRhYmxlXCIgfV07XG4gIH0sXG4gIHJlbmRlckhUTUwoeyBub2RlLCBIVE1MQXR0cmlidXRlcyB9KSB7XG4gICAgY29uc3QgeyBjb2xncm91cCwgdGFibGVXaWR0aCwgdGFibGVNaW5XaWR0aCB9ID0gY3JlYXRlQ29sR3JvdXAobm9kZSwgdGhpcy5vcHRpb25zLmNlbGxNaW5XaWR0aCk7XG4gICAgY29uc3QgdGFibGUgPSBbXG4gICAgICBcInRhYmxlXCIsXG4gICAgICBtZXJnZUF0dHJpYnV0ZXM0KHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMsIHtcbiAgICAgICAgc3R5bGU6IHRhYmxlV2lkdGggPyBgd2lkdGg6ICR7dGFibGVXaWR0aH1gIDogYG1pbi13aWR0aDogJHt0YWJsZU1pbldpZHRofWBcbiAgICAgIH0pLFxuICAgICAgY29sZ3JvdXAsXG4gICAgICBbXCJ0Ym9keVwiLCAwXVxuICAgIF07XG4gICAgcmV0dXJuIHRhYmxlO1xuICB9LFxuICBwYXJzZU1hcmtkb3duOiAodG9rZW4sIGgpID0+IHtcbiAgICBjb25zdCByb3dzID0gW107XG4gICAgaWYgKHRva2VuLmhlYWRlcikge1xuICAgICAgY29uc3QgaGVhZGVyQ2VsbHMgPSBbXTtcbiAgICAgIHRva2VuLmhlYWRlci5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgIGhlYWRlckNlbGxzLnB1c2goaC5jcmVhdGVOb2RlKFwidGFibGVIZWFkZXJcIiwge30sIFt7IHR5cGU6IFwicGFyYWdyYXBoXCIsIGNvbnRlbnQ6IGgucGFyc2VJbmxpbmUoY2VsbC50b2tlbnMpIH1dKSk7XG4gICAgICB9KTtcbiAgICAgIHJvd3MucHVzaChoLmNyZWF0ZU5vZGUoXCJ0YWJsZVJvd1wiLCB7fSwgaGVhZGVyQ2VsbHMpKTtcbiAgICB9XG4gICAgaWYgKHRva2VuLnJvd3MpIHtcbiAgICAgIHRva2VuLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGJvZHlDZWxscyA9IFtdO1xuICAgICAgICByb3cuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgIGJvZHlDZWxscy5wdXNoKGguY3JlYXRlTm9kZShcInRhYmxlQ2VsbFwiLCB7fSwgW3sgdHlwZTogXCJwYXJhZ3JhcGhcIiwgY29udGVudDogaC5wYXJzZUlubGluZShjZWxsLnRva2VucykgfV0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJvd3MucHVzaChoLmNyZWF0ZU5vZGUoXCJ0YWJsZVJvd1wiLCB7fSwgYm9keUNlbGxzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGguY3JlYXRlTm9kZShcInRhYmxlXCIsIHZvaWQgMCwgcm93cyk7XG4gIH0sXG4gIHJlbmRlck1hcmtkb3duOiAobm9kZSwgaCkgPT4ge1xuICAgIHJldHVybiBtYXJrZG93bl9kZWZhdWx0KG5vZGUsIGgpO1xuICB9LFxuICBhZGRDb21tYW5kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5zZXJ0VGFibGU6ICh7IHJvd3MgPSAzLCBjb2xzID0gMywgd2l0aEhlYWRlclJvdyA9IHRydWUgfSA9IHt9KSA9PiAoeyB0ciwgZGlzcGF0Y2gsIGVkaXRvciB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBjcmVhdGVUYWJsZShlZGl0b3Iuc2NoZW1hLCByb3dzLCBjb2xzLCB3aXRoSGVhZGVyUm93KTtcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdHIuc2VsZWN0aW9uLmZyb20gKyAxO1xuICAgICAgICAgIHRyLnJlcGxhY2VTZWxlY3Rpb25XaXRoKG5vZGUpLnNjcm9sbEludG9WaWV3KCkuc2V0U2VsZWN0aW9uKFRleHRTZWxlY3Rpb24ubmVhcih0ci5kb2MucmVzb2x2ZShvZmZzZXQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgYWRkQ29sdW1uQmVmb3JlOiAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgICAgICByZXR1cm4gYWRkQ29sdW1uQmVmb3JlKHN0YXRlLCBkaXNwYXRjaCk7XG4gICAgICB9LFxuICAgICAgYWRkQ29sdW1uQWZ0ZXI6ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBhZGRDb2x1bW5BZnRlcihzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgICAgfSxcbiAgICAgIGRlbGV0ZUNvbHVtbjogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNvbHVtbihzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgICAgfSxcbiAgICAgIGFkZFJvd0JlZm9yZTogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIGFkZFJvd0JlZm9yZShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgICAgfSxcbiAgICAgIGFkZFJvd0FmdGVyOiAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgICAgICByZXR1cm4gYWRkUm93QWZ0ZXIoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICBkZWxldGVSb3c6ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBkZWxldGVSb3coc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICBkZWxldGVUYWJsZTogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZVRhYmxlKHN0YXRlLCBkaXNwYXRjaCk7XG4gICAgICB9LFxuICAgICAgbWVyZ2VDZWxsczogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIG1lcmdlQ2VsbHMoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICBzcGxpdENlbGw6ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBzcGxpdENlbGwoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICB0b2dnbGVIZWFkZXJDb2x1bW46ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIHJldHVybiB0b2dnbGVIZWFkZXIoXCJjb2x1bW5cIikoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICB0b2dnbGVIZWFkZXJSb3c6ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIHJldHVybiB0b2dnbGVIZWFkZXIoXCJyb3dcIikoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICB0b2dnbGVIZWFkZXJDZWxsOiAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgICAgICByZXR1cm4gdG9nZ2xlSGVhZGVyQ2VsbChzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgICAgfSxcbiAgICAgIG1lcmdlT3JTcGxpdDogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgaWYgKG1lcmdlQ2VsbHMoc3RhdGUsIGRpc3BhdGNoKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGxpdENlbGwoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICBzZXRDZWxsQXR0cmlidXRlOiAobmFtZSwgdmFsdWUpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBzZXRDZWxsQXR0cihuYW1lLCB2YWx1ZSkoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICBnb1RvTmV4dENlbGw6ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBnb1RvTmV4dENlbGwoMSkoc3RhdGUsIGRpc3BhdGNoKTtcbiAgICAgIH0sXG4gICAgICBnb1RvUHJldmlvdXNDZWxsOiAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xuICAgICAgICByZXR1cm4gZ29Ub05leHRDZWxsKC0xKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgICAgfSxcbiAgICAgIGZpeFRhYmxlczogKCkgPT4gKHsgc3RhdGUsIGRpc3BhdGNoIH0pID0+IHtcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgZml4VGFibGVzKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBzZXRDZWxsU2VsZWN0aW9uOiAocG9zaXRpb24pID0+ICh7IHRyLCBkaXNwYXRjaCB9KSA9PiB7XG4gICAgICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IENlbGxTZWxlY3Rpb24yLmNyZWF0ZSh0ci5kb2MsIHBvc2l0aW9uLmFuY2hvckNlbGwsIHBvc2l0aW9uLmhlYWRDZWxsKTtcbiAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgVGFiOiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmVkaXRvci5jb21tYW5kcy5nb1RvTmV4dENlbGwoKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5lZGl0b3IuY2FuKCkuYWRkUm93QWZ0ZXIoKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuY2hhaW4oKS5hZGRSb3dBZnRlcigpLmdvVG9OZXh0Q2VsbCgpLnJ1bigpO1xuICAgICAgfSxcbiAgICAgIFwiU2hpZnQtVGFiXCI6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLmdvVG9QcmV2aW91c0NlbGwoKSxcbiAgICAgIEJhY2tzcGFjZTogZGVsZXRlVGFibGVXaGVuQWxsQ2VsbHNTZWxlY3RlZCxcbiAgICAgIFwiTW9kLUJhY2tzcGFjZVwiOiBkZWxldGVUYWJsZVdoZW5BbGxDZWxsc1NlbGVjdGVkLFxuICAgICAgRGVsZXRlOiBkZWxldGVUYWJsZVdoZW5BbGxDZWxsc1NlbGVjdGVkLFxuICAgICAgXCJNb2QtRGVsZXRlXCI6IGRlbGV0ZVRhYmxlV2hlbkFsbENlbGxzU2VsZWN0ZWRcbiAgICB9O1xuICB9LFxuICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XG4gICAgY29uc3QgaXNSZXNpemFibGUgPSB0aGlzLm9wdGlvbnMucmVzaXphYmxlICYmIHRoaXMuZWRpdG9yLmlzRWRpdGFibGU7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLmlzUmVzaXphYmxlID8gW1xuICAgICAgICBjb2x1bW5SZXNpemluZyh7XG4gICAgICAgICAgaGFuZGxlV2lkdGg6IHRoaXMub3B0aW9ucy5oYW5kbGVXaWR0aCxcbiAgICAgICAgICBjZWxsTWluV2lkdGg6IHRoaXMub3B0aW9ucy5jZWxsTWluV2lkdGgsXG4gICAgICAgICAgZGVmYXVsdENlbGxNaW5XaWR0aDogdGhpcy5vcHRpb25zLmNlbGxNaW5XaWR0aCxcbiAgICAgICAgICBWaWV3OiB0aGlzLm9wdGlvbnMuVmlldyxcbiAgICAgICAgICBsYXN0Q29sdW1uUmVzaXphYmxlOiB0aGlzLm9wdGlvbnMubGFzdENvbHVtblJlc2l6YWJsZVxuICAgICAgICB9KVxuICAgICAgXSA6IFtdLFxuICAgICAgdGFibGVFZGl0aW5nKHtcbiAgICAgICAgYWxsb3dUYWJsZU5vZGVTZWxlY3Rpb246IHRoaXMub3B0aW9ucy5hbGxvd1RhYmxlTm9kZVNlbGVjdGlvblxuICAgICAgfSlcbiAgICBdO1xuICB9LFxuICBleHRlbmROb2RlU2NoZW1hKGV4dGVuc2lvbikge1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBuYW1lOiBleHRlbnNpb24ubmFtZSxcbiAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxuICAgICAgc3RvcmFnZTogZXh0ZW5zaW9uLnN0b3JhZ2VcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICB0YWJsZVJvbGU6IGNhbGxPclJldHVybihnZXRFeHRlbnNpb25GaWVsZChleHRlbnNpb24sIFwidGFibGVSb2xlXCIsIGNvbnRleHQpKVxuICAgIH07XG4gIH1cbn0pO1xuXG4vLyBzcmMva2l0L2luZGV4LnRzXG52YXIgVGFibGVLaXQgPSBFeHRlbnNpb24uY3JlYXRlKHtcbiAgbmFtZTogXCJ0YWJsZUtpdFwiLFxuICBhZGRFeHRlbnNpb25zKCkge1xuICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBbXTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRhYmxlICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5zaW9ucy5wdXNoKFRhYmxlLmNvbmZpZ3VyZSh0aGlzLm9wdGlvbnMudGFibGUpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy50YWJsZUNlbGwgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbnNpb25zLnB1c2goVGFibGVDZWxsLmNvbmZpZ3VyZSh0aGlzLm9wdGlvbnMudGFibGVDZWxsKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMudGFibGVIZWFkZXIgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbnNpb25zLnB1c2goVGFibGVIZWFkZXIuY29uZmlndXJlKHRoaXMub3B0aW9ucy50YWJsZUhlYWRlcikpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnRhYmxlUm93ICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5zaW9ucy5wdXNoKFRhYmxlUm93LmNvbmZpZ3VyZSh0aGlzLm9wdGlvbnMudGFibGVSb3cpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4dGVuc2lvbnM7XG4gIH1cbn0pO1xuZXhwb3J0IHtcbiAgREVGQVVMVF9DRUxMX0xJTkVfU0VQQVJBVE9SLFxuICBUYWJsZSxcbiAgVGFibGVDZWxsLFxuICBUYWJsZUhlYWRlcixcbiAgVGFibGVLaXQsXG4gIFRhYmxlUm93LFxuICBUYWJsZVZpZXcsXG4gIGNyZWF0ZUNvbEdyb3VwLFxuICBjcmVhdGVUYWJsZSxcbiAgcmVuZGVyVGFibGVUb01hcmtkb3duLFxuICB1cGRhdGVDb2x1bW5zXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tiptap+extension-table@3.7.2_@tiptap+core@2.26.3_@tiptap+pm@2.26.3__@tiptap+pm@2.26.3/node_modules/@tiptap/extension-table/dist/index.js\n");

/***/ })

};
;