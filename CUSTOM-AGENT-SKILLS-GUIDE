# Custom Agent Skills Guide for Social Garden + AnythingLLM

> **Production Setup:** AnythingLLM running in EasyPanel Docker. SOW Generator (Next.js + FastAPI) on VPS. All API-driven, no desktop clients.

## Table of Contents
1. [Your Environment Overview](#your-environment-overview)
2. [Architecture: How Skills Integrate](#architecture-how-skills-integrate)
3. [Docker & EasyPanel Reality](#docker--easypanel-reality)
4. [Skill Creation for Social Garden](#skill-creation-for-social-garden)
5. [Real-World Examples](#real-world-examples)
6. [Suggested Custom Skills](#suggested-custom-skills)
7. [Testing & Deployment](#testing--deployment)
8. [Troubleshooting](#troubleshooting)

## Your Environment Overview

### Running Services (From `docker ps`)
```
‚úÖ AnythingLLM: ahmad_anything-llm.1 (Container in EasyPanel Docker)
‚úÖ Social Garden Backend: ahmad_socialgarden-backend.1 (FastAPI - PDF generation)
‚úÖ SOW Generator Frontend: ahmad_sow-qandu-me.1 (Next.js - Port 3001)
‚úÖ EasyPanel Manager: easypanel.1 (Port 3000)
‚úÖ MySQL Database: ahmad_mysql-database.1 (Port 3306)
‚úÖ Traefik: Load balancer routing all traffic
```

### API Endpoints You Control
```
üåç Frontend: https://sow.qandu.me (or localhost:3001)
ü§ñ AnythingLLM: https://ahmad-anything-llm.840tjq.easypanel.host
üìä Backend PDF API: http://localhost:8000 (or internal Docker network)
üóÑÔ∏è Database: 168.231.115.219:3306
```

### Architecture: One Workspace Per Client
```
AnythingLLM Instance
‚îú‚îÄ‚îÄ Workspace: australian-gold-growers-federation
‚îÇ   ‚îú‚îÄ‚îÄ SOW Documents (auto-embedded)
‚îÇ   ‚îú‚îÄ‚îÄ Social Garden Knowledge Base
‚îÇ   ‚îî‚îÄ‚îÄ Client Chat Interface
‚îÇ
‚îú‚îÄ‚îÄ Workspace: acme-corp
‚îÇ   ‚îú‚îÄ‚îÄ SOW Documents
‚îÇ   ‚îî‚îÄ‚îÄ Client Chat
‚îÇ
‚îî‚îÄ‚îÄ Workspace: pop (analytics workspace)
    ‚îî‚îÄ‚îÄ All SOWs from all clients
```

## Prerequisites & Setup

### For Skill Development
You already have everything! But here's what you're using:

```bash
# Your actual setup (in Docker):
‚úì Node.js 18+ (in frontend container)
‚úì Python 3.9+ (in backend container)
‚úì Docker Compose (runs everything)
‚úì MySQL (for persistent data)

# To develop skills locally:
# Option 1: SSH into VPS
ssh root@168.231.115.219

# Option 2: Develop in your local machine
# (We'll cover this below)
```

## Architecture: How Skills Integrate

### The Real Picture: AnythingLLM in Docker

When you add a custom skill to AnythingLLM running in EasyPanel Docker:

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ EasyPanel (Running on VPS 168.231.115.219)                      ‚îÇ
‚îÇ                                                                   ‚îÇ
‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ
‚îÇ ‚îÇ AnythingLLM Docker Container (ahmad_anything-llm.1)       ‚îÇ   ‚îÇ
‚îÇ ‚îÇ                                                             ‚îÇ   ‚îÇ
‚îÇ ‚îÇ  ‚îú‚îÄ Workspaces (one per client)                           ‚îÇ   ‚îÇ
‚îÇ ‚îÇ  ‚îú‚îÄ Documents (auto-embedded SOWs)                        ‚îÇ   ‚îÇ
‚îÇ ‚îÇ  ‚îú‚îÄ Chat Engine & Threads                                 ‚îÇ   ‚îÇ
‚îÇ ‚îÇ  ‚îú‚îÄ System Prompts (client-facing)                        ‚îÇ   ‚îÇ
‚îÇ ‚îÇ  ‚îî‚îÄ Custom Skills (YOUR CODE HERE) ‚ú®                     ‚îÇ   ‚îÇ
‚îÇ ‚îÇ                                                             ‚îÇ   ‚îÇ
‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ
‚îÇ                                                                   ‚îÇ
‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ
‚îÇ ‚îÇ Your Frontend (Next.js + FastAPI)                         ‚îÇ   ‚îÇ
‚îÇ ‚îÇ - Calls AnythingLLM API                                   ‚îÇ   ‚îÇ
‚îÇ ‚îÇ - Skills can call your Backend APIs                       ‚îÇ   ‚îÇ
‚îÇ ‚îÇ - Skills can query MySQL database                         ‚îÇ   ‚îÇ
‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### Where Custom Skills Live

Skills in AnythingLLM are JavaScript functions that:
1. Receive input from chat or API
2. Have access to workspace context
3. Can call external APIs or your backend
4. Return structured responses

**Key Point:** Skills run **INSIDE** AnythingLLM, so they have direct access to:
- Current workspace documents
- Chat context
- User info
- Your database (via API)

### Your Current Integration Pattern

```typescript
// How your frontend talks to skills:
const response = await fetch('https://ahmad-anything-llm.840tjq.easypanel.host/api/v1/agent/message', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer 0G0WTZ3-6ZX4D20-H35VBRG-9059WPA',
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    message: userInput,
    workspaceSlug: 'australian-gold-growers', // Client workspace
    mode: 'chat' // or 'query' for agent search
  })
});
```

**Skills integrate into this flow** - they can be triggered by:
- Agent triggers in prompts (e.g., `@skill_name`)
- Direct API calls
- Scheduled tasks
- Workspace events

## Docker & EasyPanel Reality

### Key Difference: No "Desktop" Skills

The old guide mentioned:
> "AnythingLLM: Running instance in Docker, Desktop, or Cloud"

**You don't have Desktop.** You have:
- ‚úÖ Docker (EasyPanel-managed)
- ‚úÖ Cloud API (EasyPanel-exposed)
- ‚ùå No local development with "Watch Mode"

### Where Skills Actually Get Deployed

**Option 1: EasyPanel Web UI (Easiest)**
1. Log into EasyPanel at `https://your-easypanel-domain:3000`
2. Find AnythingLLM service
3. File manager ‚Üí `/app/storage/plugins/` (if available)
4. Upload your skill folder
5. Restart container

**Option 2: SSH + Docker Commands**
```bash
# SSH into VPS
ssh root@168.231.115.219

# Navigate to AnythingLLM storage
cd /var/lib/docker/volumes/  # Find the volume
# OR
docker exec -it ahmad_anything-llm.1 bash

# Inside container:
cd /app/storage/plugins/agent-skills/
# Add your skill folder here
```

**Option 3: Volume Mount (Best for Development)**
Update your `docker-compose.yml` in EasyPanel:

```yaml
# Add to anythingllm service
services:
  anything-llm:
    volumes:
      - ./custom-skills:/app/storage/plugins/agent-skills
      # This mounts a local folder into the container
```

### The Real Workflow

```
1. Develop skill locally (Node.js)
   ‚îî‚îÄ Write handler.js + package.json

2. Test locally
   ‚îî‚îÄ npm install && npm test

3. Deploy to Docker
   ‚îî‚îÄ Copy to EasyPanel volume OR use SSH

4. Restart AnythingLLM
   ‚îî‚îÄ docker-compose restart anythingllm

5. Verify in UI
   ‚îî‚îÄ Skills ‚Üí Your Skill Name ‚Üí Settings
```

### API You'll Actually Call

From your Next.js frontend, skills are triggered via:

```typescript
// Direct skill invocation (if exposed)
POST https://ahmad-anything-llm.840tjq.easypanel.host/api/v1/skills/{skillId}/execute

// Via agent message (skill called within conversation)
POST https://ahmad-anything-llm.840tjq.easypanel.host/api/v1/agent/message
{
  workspaceSlug: "client-name",
  message: "@my-skill param1=value1 param2=value2"
}

// Via workspace chat (skill processed)
POST https://ahmad-anything-llm.840tjq.easypanel.host/api/v1/workspace/{slug}/stream-chat
{
  message: "Use the rate card skill to show me pricing for web development"
}
```

## Skill Creation for Social Garden

### Anatomy of a Social Garden Skill

**File Structure:**
```
/custom-skills/my-skill/
‚îú‚îÄ‚îÄ handler.js           # The actual skill (required)
‚îú‚îÄ‚îÄ package.json         # Dependencies (optional)
‚îî‚îÄ‚îÄ README.md           # Documentation
```

**Minimal Example:**
```javascript
// handler.js
module.exports = {
  name: 'My Social Garden Skill',
  description: 'Does something useful for clients',
  
  execute: async function(params) {
    // params = what the user passes
    // this.context = workspace data if available
    
    try {
      const result = await doSomething(params);
      
      return {
        success: true,
        data: result,
        message: 'Completed!'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
};
```

### Pattern: Call Your Backend APIs

Since your backend (FastAPI) is in the same Docker network:

```javascript
// handler.js - Skill that calls your PDF backend
const axios = require('axios');

module.exports = {
  name: 'Rate Card PDF Generator',
  description: 'Generate PDF with current rates',
  
  execute: async function(params) {
    try {
      // Call your Python backend (internal Docker network)
      const response = await axios.post('http://backend:8000/api/generate-pdf', {
        clientName: params.clientName,
        includeRates: true
      });
      
      return {
        success: true,
        data: {
          pdfUrl: response.data.url,
          filename: response.data.filename
        }
      };
      
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
};
```

### Pattern: Access Workspace Data

```javascript
// handler.js - Skill that reads current workspace
module.exports = {
  name: 'Workspace Summary',
  description: 'Get summary of current workspace SOWs',
  
  execute: async function(params, context) {
    // context has workspace info
    const workspace = context?.workspace;
    
    if (!workspace) {
      return { success: false, error: 'No workspace context' };
    }
    
    return {
      success: true,
      data: {
        workspaceName: workspace.name,
        workspaceSlug: workspace.slug,
        documentCount: workspace.documents?.length || 0
      }
    };
  }
};
```

### Pattern: Database Queries

```javascript
// handler.js - Query your MySQL database
const mysql = require('mysql2/promise');

const dbConfig = {
  host: process.env.DB_HOST || '168.231.115.219',
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME
};

module.exports = {
  name: 'Client History Lookup',
  description: 'Find all SOWs for a client',
  
  execute: async function(params) {
    try {
      const connection = await mysql.createConnection(dbConfig);
      
      const [rows] = await connection.execute(
        'SELECT * FROM documents WHERE client_name = ?',
        [params.clientName]
      );
      
      await connection.end();
      
      return {
        success: true,
        data: rows,
        count: rows.length
      };
      
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
};
```

### Pattern: External API Integration

```javascript
// handler.js - Call external services
const axios = require('axios');

module.exports = {
  name: 'Client Website Analyzer',
  description: 'Analyze client website using external API',
  
  execute: async function(params) {
    try {
      const response = await axios.post('https://api.similar-web.com/analyze', {
        domain: params.domain,
        metrics: ['traffic', 'engagement']
      });
      
      return {
        success: true,
        data: response.data
      };
      
    } catch (error) {
      return { 
        success: false, 
        error: error.message,
        tip: 'Make sure API_KEY is set in environment'
      };
    }
  }
};
```

## Real-World Examples

### Example 1: SOW Rate Card Skill

The most obvious one - you already have rate cards! This skill exposes them to chat:

```javascript
// rate-card-skill/handler.js
const fs = require('fs').promises;
const path = require('path');

// Your actual 91-role rate card
const RATE_CARD = {
  version: '2025-10-27',
  roles: [
    { id: 1, name: 'Account Manager', rate: 150, hourlyRate: true },
    { id: 2, name: 'Marketing Manager', rate: 140, hourlyRate: true },
    { id: 3, name: 'Web Developer', rate: 130, hourlyRate: true },
    // ... 88 more roles from your SOCIAL-GARDEN-RATE-CARD-91-ROLES.txt
  ]
};

module.exports = {
  name: 'Rate Card Lookup',
  description: 'Query pricing for any role in Social Garden rate card',
  
  execute: async function(params) {
    const { roleNameOrId, quantity = 1 } = params;
    
    if (!roleNameOrId) {
      return {
        success: false,
        error: 'Please specify a role name or ID',
        hint: 'Example: "Web Developer" or "role-3"'
      };
    }
    
    // Find role (by name or ID)
    const role = RATE_CARD.roles.find(r => 
      r.name.toLowerCase() === roleNameOrId.toLowerCase() || 
      r.id.toString() === roleNameOrId
    );
    
    if (!role) {
      return {
        success: false,
        error: `Role not found: ${roleNameOrId}`,
        availableRoles: RATE_CARD.roles.map(r => `${r.name} ($${r.rate}/hr)`)
      };
    }
    
    return {
      success: true,
      data: {
        role: role.name,
        hourlyRate: `$${role.rate} AUD`,
        totalFor: `${quantity} hours: $${role.rate * quantity} AUD`,
        rateCardVersion: RATE_CARD.version
      }
    };
  }
};
```

**Usage in Chat:**
```
Client: "How much does a Web Developer cost?"
AI uses skill: ‚Üí Shows $130/hr from rate card
"Web Developers are $130 per hour. For a 40-hour project, that would be $5,200 AUD."
```

### Example 2: SOW Document Analyzer

Given a client workspace, analyze all their SOWs and create a summary:

```javascript
// sow-analyzer/handler.js
module.exports = {
  name: 'SOW Portfolio Analysis',
  description: 'Analyze all SOWs in a workspace - costs, timelines, deliverables',
  
  execute: async function(params, context) {
    const workspace = context?.workspace;
    const documents = context?.documents || [];
    
    if (!workspace) {
      return { success: false, error: 'No workspace context' };
    }
    
    // Analyze documents
    const sowAnalysis = {
      workspaceName: workspace.name,
      totalSOWs: documents.length,
      documents: documents.map(doc => {
        // Parse document content (it's in HTML/markdown)
        const content = doc.content || '';
        
        // Look for pricing data (you'll improve parsing here)
        const hasPricing = content.includes('Total Investment') || content.includes('$');
        const hasDeliverables = content.includes('Deliverables');
        const hasTimeline = content.includes('Timeline') || content.includes('Phase');
        
        return {
          name: doc.title,
          hasPricing,
          hasDeliverables,
          hasTimeline,
          wordCount: content.split(/\s+/).length
        };
      }),
      analysis: {
        averageSOWLength: Math.round(
          documents.reduce((sum, d) => sum + (d.content?.length || 0), 0) / 
          documents.length
        ),
        missingPricing: documents.filter(d => !d.content?.includes('$')).length,
        completeness: '75%' // You could improve this
      }
    };
    
    return {
      success: true,
      data: sowAnalysis
    };
  }
};
```

**Usage:**
```
Agent: "Analyze all SOWs for AGGF"
‚Üí Shows 3 SOWs, total coverage, what's complete, what's missing
```

### Example 3: Google Sheets Integration

Your backend already creates Google Sheets! This skill could trigger that:

```javascript
// sheets-generator/handler.js
const axios = require('axios');

module.exports = {
  name: 'Generate Pricing Sheet',
  description: 'Create Google Sheets pricing table from SOW',
  
  execute: async function(params) {
    const { sowId, clientEmail } = params;
    
    if (!sowId) {
      return { success: false, error: 'sowId required' };
    }
    
    try {
      // Call your FastAPI backend
      const response = await axios.post('http://backend:8000/api/create-sheet', {
        sowId,
        clientEmail,
        autoShare: true
      });
      
      return {
        success: true,
        data: {
          sheetUrl: response.data.sheet_url,
          sheetId: response.data.sheet_id,
          message: `‚úÖ Sheet created and ${clientEmail ? 'shared with ' + clientEmail : 'ready to share'}`
        }
      };
      
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
};
```

### Example 4: Client Insights Generator

Use the research already in your app - trigger analysis automatically:

```javascript
// client-insights/handler.js
const axios = require('axios');

module.exports = {
  name: 'Client Website Insights',
  description: 'Extract insights from client website (requires web research)',
  
  execute: async function(params, context) {
    const { clientName, clientWebsite } = params;
    const workspace = context?.workspace;
    
    if (!clientWebsite) {
      return { success: false, error: 'clientWebsite URL required' };
    }
    
    try {
      // Call your analyze-client endpoint
      const response = await axios.post('http://localhost:3001/api/sow/analyze-client', {
        sowId: params.sowId,
        clientWebsite,
        clientName: clientName || workspace?.name
      });
      
      return {
        success: true,
        data: response.data
      };
      
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
};
```

## Suggested Custom Skills (Ranked by Value)

Based on analyzing your project, here are the most valuable skills you should build first:

### üî¥ TIER 1: High Value (Build These First)

#### 1. **Rate Card Lookup Skill** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
**Why:** Clients ask "how much does X cost?" all the time
**Implementation:** 30 minutes
**Impact:** Immediate - reduces repetitive questions

```
Client: "What's the rate for a CRM Specialist?"
AI: *uses skill* ‚Üí "$145/hr, Senior CRM specialist with HubSpot expertise"
```

**File:** `rate-card-lookup/handler.js` (from Example 1 above)

---

#### 2. **SOW Total Investment Calculator** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
**Why:** You already embed SOWs; this parses them for key numbers
**Implementation:** 1 hour
**Impact:** Real-time project summaries without manual lookup

```
Client: "What's my total investment?"
AI: *uses skill* ‚Üí Reads SOW, extracts total, shows breakdown by role
```

**Implementation:**
```javascript
// sow-calculator/handler.js
module.exports = {
  name: 'SOW Investment Analyzer',
  execute: async function(params, context) {
    const documents = context?.documents || [];
    
    const totals = documents.map(doc => {
      // Parse pricing from HTML content
      const match = doc.content?.match(/Total.*?\$[\d,]+/i);
      const total = match ? parseInt(match[0].replace(/\D/g, '')) : 0;
      
      return {
        sowTitle: doc.title,
        total: `$${total.toLocaleString()} AUD`,
        parsed: true
      };
    });
    
    const grandTotal = totals.reduce((sum, item) => {
      const num = parseInt(item.total.replace(/\D/g, '')) || 0;
      return sum + num;
    }, 0);
    
    return {
      success: true,
      data: {
        breakdown: totals,
        grandTotal: `$${grandTotal.toLocaleString()} AUD`,
        sowCount: totals.length
      }
    };
  }
};
```

---

#### 3. **Project Timeline Extractor** ‚≠ê‚≠ê‚≠ê‚≠ê
**Why:** Clients often ask "when does it start?" - should be in SOW
**Implementation:** 1 hour
**Impact:** Faster client onboarding understanding

```
Client: "What's the timeline?"
AI: *uses skill* ‚Üí Extracts phases and dates from SOW
```

```javascript
// timeline-extractor/handler.js
module.exports = {
  name: 'Project Timeline Parser',
  execute: async function(params, context) {
    const documents = context?.documents || [];
    
    const timelines = documents.map(doc => {
      // Look for Phase patterns
      const phases = [];
      const phaseMatches = doc.content?.match(/Phase \d+.*?(?=Phase \d+|$)/gi) || [];
      
      phaseMatches.forEach((phase, idx) => {
        phases.push({
          name: `Phase ${idx + 1}`,
          content: phase.substring(0, 100) + '...'
        });
      });
      
      return {
        sowTitle: doc.title,
        phases: phases.length > 0 ? phases : 'No structured phases found'
      };
    });
    
    return { success: true, data: timelines };
  }
};
```

---

#### 4. **Deliverables Checklist Generator** ‚≠ê‚≠ê‚≠ê‚≠ê
**Why:** Creates a quick reference checklist from SOW
**Implementation:** 1.5 hours
**Impact:** Helps clients understand exactly what they're getting

```
Client: "What exactly do I get?"
AI: *uses skill* ‚Üí Creates markdown checklist of all deliverables
```

```javascript
// deliverables/handler.js
module.exports = {
  name: 'Deliverables Checklist',
  execute: async function(params, context) {
    const documents = context?.documents || [];
    
    const checklists = documents.map(doc => {
      // Parse deliverables section
      const match = doc.content?.match(/Deliverables.*?(?=###|$)/is);
      const content = match ? match[0] : '';
      
      // Convert to checklist
      const items = content
        .split(/[\n‚Ä¢\-]/)
        .filter(line => line.trim().length > 5)
        .map(line => `- [ ] ${line.trim()}`);
      
      return {
        sowTitle: doc.title,
        checklist: items.join('\n'),
        itemCount: items.length
      };
    });
    
    return { success: true, data: checklists };
  }
};
```

---

### üü° TIER 2: Medium Value (Build After Tier 1)

#### 5. **Lead Time Calculator** ‚≠ê‚≠ê‚≠ê‚≠ê
**Why:** Help clients understand project start dates
**Implementation:** 2 hours

```
Client: "If we sign today, when do you start?"
AI: *uses skill* ‚Üí Checks calendar, shows typical lead times
```

---

#### 6. **Payment Terms Summarizer** ‚≠ê‚≠ê‚≠ê‚≠ê
**Why:** Clients always ask about payment schedules
**Implementation:** 1.5 hours

```
Client: "What's the payment schedule?"
AI: *uses skill* ‚Üí Extracts payment terms section from SOW
```

---

#### 7. **Service Category Explainer** ‚≠ê‚≠ê‚≠ê
**Why:** Help clients understand what each service includes
**Implementation:** 2 hours

```
Client: "What's included in HubSpot integration?"
AI: *uses skill* ‚Üí Queries your knowledge base + SOW context
```

---

### üü¢ TIER 3: Nice-to-Have (Polish Features)

#### 8. **PDF Export From Chat** ‚≠ê‚≠ê‚≠ê
**Why:** Let clients generate PDF of chat conversation
**Implementation:** 2 hours
**Calls:** Your existing PDF backend

---

#### 9. **Client Portfolio Summary** ‚≠ê‚≠ê
**Why:** "Show me all projects for this company"
**Implementation:** 1 hour
**Database query:** Joins documents + workspaces

---

#### 10. **Competitor Comparison** ‚≠ê‚≠ê
**Why:** Position Social Garden vs alternatives
**Implementation:** 3 hours
**Data:** Could live in knowledge base

---

## Implementation Roadmap

```
Week 1:
  Mon: Rate Card Lookup Skill (30 min)
  Tue: SOW Calculator Skill (1 hr)
  Wed: Timeline Extractor (1 hr)
  Thu: Deliverables Checklist (1.5 hrs)
  Fri: Testing + Deployment

Week 2:
  Mon-Wed: Tier 2 skills
  Thu-Fri: Integration testing
```

Each skill should:
1. Be a separate folder
2. Have its own `handler.js`
3. Have a README with examples
4. Include error handling
5. Log execution (for debugging)

---

## Testing & Deployment

### Deployment Process (EasyPanel)

**Step 1: Create Skill Folder Structure**
```bash
# On your local machine or VPS
mkdir -p custom-skills/my-skill
cd custom-skills/my-skill
```

**Step 2: Write Your Skill**
```bash
# handler.js
cat > handler.js << 'EOF'
module.exports = {
  name: 'My Skill',
  execute: async function(params) {
    return { success: true, data: 'Hello!' };
  }
};
EOF

# package.json (only if you need npm packages)
cat > package.json << 'EOF'
{
  "name": "my-skill",
  "version": "1.0.0",
  "dependencies": {
    "axios": "^1.4.0"
  }
}
EOF
```

**Step 3: Deploy to AnythingLLM**

**Option A: Via SSH (Recommended)**
```bash
# SSH into VPS
ssh root@168.231.115.219

# Find AnythingLLM container ID
docker ps | grep anything-llm

# Copy skill to container
docker cp custom-skills/my-skill CONTAINER_ID:/app/storage/plugins/agent-skills/

# Restart
docker restart CONTAINER_ID
```

**Option B: Via EasyPanel UI**
1. Log into EasyPanel (port 3000)
2. Find AnythingLLM service
3. File Manager ‚Üí `/app/storage/plugins/agent-skills/`
4. Upload folder
5. Restart service

### Testing Your Skill

**Quick Test via cURL:**
```bash
# Get your workspace slug first
WORKSPACE="australian-gold-growers"

# Try using skill in chat
curl -X POST "https://ahmad-anything-llm.840tjq.easypanel.host/api/v1/workspace/${WORKSPACE}/stream-chat" \
  -H "Authorization: Bearer 0G0WTZ3-6ZX4D20-H35VBRG-9059WPA" \
  -H "Content-Type: application/json" \
  -d '{
    "message": "@my-skill param1=value1"
  }'
```

**Full Integration Test:**
```bash
# 1. Test skill exists
curl -s https://ahmad-anything-llm.840tjq.easypanel.host/api/v1/skills | grep my-skill

# 2. Test in agent mode
curl -X POST https://ahmad-anything-llm.840tjq.easypanel.host/api/v1/agent/message \
  -H "Authorization: Bearer YOUR_KEY" \
  -d '{"message": "Use my-skill to process this", "workspaceSlug": "pop"}'

# 3. Watch logs
ssh root@168.231.115.219
docker logs -f ahmad_anything-llm.1 | grep -i "my-skill"
```

### Local Development Workflow

If you want to test locally before deploying:

```bash
# 1. Create test runner
cat > test-skill.js << 'EOF'
const handler = require('./handler.js');

// Simulate execution
(async () => {
  const result = await handler.execute({
    clientName: 'Test Client',
    roleNameOrId: 'Web Developer'
  });
  
  console.log('Result:', result);
})();
EOF

# 2. Run locally
node test-skill.js

# 3. Once working, deploy to Docker
```

### Error Handling Checklist

```javascript
// Always include these checks:

module.exports = {
  execute: async function(params) {
    // 1. Validate inputs
    if (!params?.requiredParam) {
      return { success: false, error: 'requiredParam missing' };
    }
    
    // 2. Try/catch for runtime errors
    try {
      const result = await doSomething(params);
      
      // 3. Check for API errors
      if (!result) {
        return { success: false, error: 'No result returned' };
      }
      
      return { success: true, data: result };
      
    } catch (error) {
      console.error('Skill error:', error);
      return { 
        success: false, 
        error: error.message,
        hint: 'Check logs for details'
      };
    }
  }
};
```

### Debugging on Production

```bash
# SSH to server
ssh root@168.231.115.219

# Watch logs in real-time
docker logs -f ahmad_anything-llm.1

# Or check specific skill errors
docker logs ahmad_anything-llm.1 | grep -A 5 "my-skill"

# Restart if needed
docker restart ahmad_anything-llm.1

# Check container status
docker ps | grep anything-llm
```

### Performance Tips

1. **Cache expensive operations:**
   ```javascript
   // Don't call external API every time
   const cache = {};
   
   module.exports = {
     execute: async function(params) {
       const key = JSON.stringify(params);
       if (cache[key]) return cache[key];
       
       const result = await expensiveCall();
       cache[key] = result;
       return result;
     }
   };
   ```

2. **Set timeouts:**
   ```javascript
   const timeout = (promise, ms) => {
     return Promise.race([
       promise,
       new Promise((_, reject) => 
         setTimeout(() => reject(new Error('Timeout')), ms)
       )
     ]);
   };
   
   // Usage:
   await timeout(slowAPI(), 5000); // 5 second timeout
   ```

3. **Return early for invalid input:**
   ```javascript
   if (!params.required) {
     return { success: false, error: 'required param missing' };
   }
   // Only then do expensive operations
   ```

## Troubleshooting

### Common Issues and Solutions

#### Issue 1: Skill Not Loading
```bash
# Check skill file structure
ls -la storage/plugins/agent-skills/your-skill/

# Verify plugin.json syntax
cat storage/plugins/agent-skills/your-skill/plugin.json | jq .

# Check handler.js syntax
node -c storage/plugins/agent-skills/your-skill/handler.js

# Check AnythingLLM logs
docker logs anythingllm | grep skill
```

#### Issue 2: Skill Execution Timeout
```javascript
// Add timeout handling to your skill
const { withTimeout } = require('./utils');

module.exports = {
  execute: async function(params) {
    return await withTimeout(
      performOperation(params),
      25000, // 25 second timeout
      new Error('Operation timed out')
    );
  }
};
```

#### Issue 3: Memory Issues
```javascript
// Implement proper memory management
const {gc} = require('v8');

module.exports = {
  execute: async function(params) {
    try {
      // Process data in chunks
      const chunkSize = 100;
      const results = [];
      
      for (let i = 0; i < params.data.length; i += chunkSize) {
        const chunk = params.data.slice(i, i + chunkSize);
        const chunkResult = await processChunk(chunk);
        results.push(...chunkResult);
        
        // Force garbage collection periodically
        if (i % (chunkSize * 10) === 0) {
          gc();
        }
      }
      
      return { success: true, data: results };
      
    } catch (error) {
      // Cleanup on error
      gc();
      throw error;
    }
  }
};
```

#### Issue 4: EasyPanel Integration Problems
```bash
# Check EasyPanel service status
curl -s "https://your-easypanel-domain/health"

# Verify skill deployment
ssh root@your-easypanel-host "ls -la /app/storage/plugins/agent-skills/"

# Check EasyPanel logs
ssh root@your-easypanel-host "docker logs anythingllm 2>&1 | grep -i skill"
```

### Debug Mode
```javascript
// Enable debug logging
module.exports = {
  execute: async function(params) {
    if (process.env.DEBUG === 'true') {
      console.log('DEBUG: Skill execution started', {
        timestamp: new Date().toISOString(),
        params: sanitizeParams(params)
      });
    }
    
    try {
      const result = await performOperation(params);
      
      if (process.env.DEBUG === 'true') {
        console.log('DEBUG: Skill execution completed', {
          duration: Date.now() - startTime,
          resultSize: JSON.stringify(result).length
        });
      }
      
      return result;
      
    } catch (error) {
      if (process.env.DEBUG === 'true') {
        console.error('DEBUG: Skill execution failed', {
          error: error.message,
          stack: error.stack
        });
      }
      
      throw error;
    }
  }
};
```

## Conclusion

This comprehensive guide provides everything needed to create, deploy, and maintain custom agent skills for AnythingLLM in EasyPanel environments. The frameworks, patterns, and examples provided here can be adapted for any business need.

### Key Takeaways
1. **Start Simple**: Begin with basic skills and gradually add complexity
2. **Follow Patterns**: Use established architectural patterns for consistency
3. **Test Thoroughly**: Implement comprehensive testing from the beginning
4. **Monitor Performance**: Use logging and monitoring for production skills
5. **Document Everything**: Maintain clear documentation for maintainability

### Next Steps
1. Choose a skill template from the examples
2. Implement your first custom skill using this guide
3. Set up testing and validation processes
4. Deploy to your EasyPanel environment
5. Monitor and iterate based on usage patterns

### Additional Resources
- [AnythingLLM Official Documentation](https://docs.anythingllm.com/)
- [EasyPanel Documentation](https://easypanel.io/docs/)
- [Node.js Best Practices](https://nodejs.org/en/docs/guides/)
- [API Integration Patterns](https://github.com/request/request#readme)

---

*Last Updated: October 27, 2025*
*Version: 1.0.0*
*Author: Social Garden Development Team*
