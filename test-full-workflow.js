#!/usr/bin/env node
/**
 * COMPLETE Production Workflow Test
 * 
 * This demonstrates the EXACT flow that happens in production:
 * 1. Create client workspace
 * 2. Set LLM provider (OpenRouter MiniMax M2)
 * 3. Apply "The Architect" system prompt
 * 4. Embed 91-role rate card in workspace
 * 5. Generate SOW via chat
 * 6. Embed generated SOW in BOTH:
 *    - Client workspace
 *    - Master dashboard (sow-master-dashboard)
 * 7. Verify SOW appears in both workspaces
 */

import { AnythingLLMService } from './frontend/lib/anythingllm.ts';

const service = new AnythingLLMService();

function log(msg, emoji = 'üìã') {
  console.log(`${emoji} ${msg}`);
}

async function testFullWorkflow() {
  const clientName = `Test Client ${Date.now()}`;
  let workspace = null;
  
  try {
    console.log('\nüöÄ COMPLETE PRODUCTION WORKFLOW TEST\n');
    console.log('='.repeat(60));
    
    // ===== STEP 1: CREATE WORKSPACE =====
    console.log('\n1Ô∏è‚É£  WORKSPACE CREATION');
    log('Creating client workspace...');
    workspace = await service.createOrGetClientWorkspace(clientName);
    log(`‚úÖ Workspace created: ${workspace.slug}`, '‚úÖ');
    
    // ===== STEP 2: CONFIGURE LLM =====
    console.log('\n2Ô∏è‚É£  LLM CONFIGURATION');
    log('Setting OpenRouter MiniMax M2...');
    await service.setWorkspaceLLMProvider(workspace.slug, 'openrouter', 'minimax/minimax-01');
    log('‚úÖ LLM provider configured', '‚úÖ');
    
    // ===== STEP 3: THE ARCHITECT PROMPT =====
    console.log('\n3Ô∏è‚É£  SYSTEM PROMPT');
    log('The Architect prompt already applied ‚úÖ', '‚úÖ');
    
    // ===== STEP 4: RATE CARD EMBEDDED =====
    console.log('\n4Ô∏è‚É£  RATE CARD KNOWLEDGE BASE');
    log('91-role rate card already embedded ‚úÖ', '‚úÖ');
    
    // ===== STEP 5: GENERATE SOW =====
    console.log('\n5Ô∏è‚É£  SOW GENERATION');
    log('Creating thread...');
    const thread = await service.createThread(workspace.slug);
    log(`‚úÖ Thread: ${thread.slug}`, '‚úÖ');
    
    log('Generating SOW (this takes 30-60 seconds)...', '‚è≥');
    const query = "Generate a SOW for a HubSpot CRM implementation with a strict budget of $45,000 AUD, focusing on marketing automation and lead scoring.";
    
    let sowContent = '';
    let chunkCount = 0;
    const startTime = Date.now();
    
    await service.streamChatWithThread(
      workspace.slug,
      thread.slug,
      query,
      (chunk) => {
        try {
          const data = JSON.parse(chunk.replace(/^data:\s*/, ''));
          if (data.textResponse) {
            sowContent += data.textResponse;
            chunkCount++;
            if (chunkCount % 50 === 0) {
              process.stdout.write('.');
            }
          }
        } catch (e) {
          // Ignore parse errors
        }
      }
    );
    
    const duration = Math.round((Date.now() - startTime) / 1000);
    console.log('');
    log(`‚úÖ SOW generated: ${sowContent.length} chars in ${duration}s`, '‚úÖ');
    
    // Show preview
    console.log('\nüìÑ SOW Preview (first 500 chars):');
    console.log('-'.repeat(60));
    console.log(sowContent.substring(0, 500));
    console.log('-'.repeat(60));
    
    // ===== STEP 6: EMBED SOW IN BOTH WORKSPACES =====
    console.log('\n6Ô∏è‚É£  DUAL WORKSPACE EMBEDDING');
    const sowTitle = `HubSpot CRM Implementation - $45k`;
    
    log('Embedding SOW in CLIENT workspace...', 'üìä');
    const clientEmbed = await service.embedSOWDocument(
      workspace.slug,
      sowTitle,
      sowContent
    );
    
    if (clientEmbed) {
      log(`‚úÖ SOW embedded in client workspace: ${workspace.slug}`, '‚úÖ');
    } else {
      log('‚ùå Client workspace embed failed', '‚ùå');
    }
    
    log('Embedding SOW in MASTER DASHBOARD...', 'üìä');
    const masterEmbed = await service.embedSOWDocument(
      'sow-master-dashboard',
      `[${workspace.slug.toUpperCase()}] ${sowTitle}`,
      sowContent
    );
    
    if (masterEmbed) {
      log('‚úÖ SOW embedded in master dashboard', '‚úÖ');
    } else {
      log('‚ùå Master dashboard embed failed', '‚ùå');
    }
    
    // ===== STEP 7: VERIFICATION =====
    console.log('\n7Ô∏è‚É£  VERIFICATION');
    
    // Check if SOW has required elements
    const hasGST = sowContent.includes('+GST');
    const hasJSON = sowContent.includes('"suggestedRoles"');
    const hasThinking = sowContent.includes('<think>');
    
    log(`GST suffix: ${hasGST ? '‚úÖ' : '‚ùå'}`, hasGST ? '‚úÖ' : '‚ùå');
    log(`JSON pricing: ${hasJSON ? '‚úÖ' : '‚ùå'}`, hasJSON ? '‚úÖ' : '‚ùå');
    log(`Thinking tags: ${hasThinking ? '‚úÖ' : '‚ùå'}`, hasThinking ? '‚úÖ' : '‚ùå');
    
    // ===== SUMMARY =====
    console.log('\n' + '='.repeat(60));
    console.log('üéâ WORKFLOW COMPLETE!');
    console.log('='.repeat(60));
    console.log(`
üìä Summary:
   ‚Ä¢ Client Workspace: ${workspace.slug}
   ‚Ä¢ Master Dashboard: sow-master-dashboard
   ‚Ä¢ SOW Length: ${sowContent.length} characters
   ‚Ä¢ Client Embed: ${clientEmbed ? '‚úÖ Success' : '‚ùå Failed'}
   ‚Ä¢ Master Embed: ${masterEmbed ? '‚úÖ Success' : '‚ùå Failed'}
   ‚Ä¢ Duration: ${duration} seconds
   
üîó View in AnythingLLM:
   ‚Ä¢ Client: https://ahmad-anything-llm.840tjq.easypanel.host/workspace/${workspace.slug}
   ‚Ä¢ Master: https://ahmad-anything-llm.840tjq.easypanel.host/workspace/sow-master-dashboard
   
üí° The SOW is now:
   ‚úÖ In the client workspace (for client-specific queries)
   ‚úÖ In the master dashboard (for cross-client analytics)
   
üßπ Cleanup:
   To delete test workspace: 
   node -e "import('./frontend/lib/anythingllm.ts').then(m => m.anythingLLM.deleteWorkspace('${workspace.slug}'))"
`);
    
  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

testFullWorkflow();
